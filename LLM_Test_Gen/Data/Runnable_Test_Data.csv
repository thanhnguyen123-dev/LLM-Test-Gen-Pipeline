"FQN","Signature","Jimple Code Representation","Is Constructor","Method Modifiers","Annotations","Java Doc","Class Context","Class Fields","Loop Count","Branch Count","External Dependencies","Literal Constants","Constructor Visibility","Class Factory Methods","Generated Code","Formatted Code","Saved Path","Runnable Test Code","Final Compile Status"
"org.apache.commons.lang3.CharRange.isNegated()","boolean isNegated()","{
    org.apache.commons.lang3.CharRange this;
    unknown $stack1;


    this := @this: org.apache.commons.lang3.CharRange;
    $stack1 = this.<org.apache.commons.lang3.CharRange: boolean negated>;

    return $stack1;
}
","false","PUBLIC","","<p>Is this {@code CharRange} negated.</p>

<p>A negated range includes everything except that defined by the
start and end characters.</p>
@return {@code true} if negated","implements java.io.Serializable, java.lang.Iterable","PRIVATE FINAL char start; PRIVATE FINAL boolean negated; PRIVATE TRANSIENT java.lang.String iToString; PRIVATE STATIC FINAL long serialVersionUID; PRIVATE FINAL char end","0","0","","","private","is(char), isNot(char), isIn(char,char), isNotIn(char,char)","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_boolean_isNegated_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        // Use factory methods since constructor is private
        charRange = CharRange.isNot('a');
    }

    @Test
    public void testIsNegated_PositiveCase() {
        // Scenario where range is negated
        assertTrue(charRange.isNegated());
    }

    @Test
    public void testIsNegated_NegativeCase() {
        // Creating a non-negated range
        CharRange nonNegatedRange = CharRange.is('a');
        assertFalse(nonNegatedRange.isNegated());
    }
}","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_boolean_isNegated_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        // Use factory methods since constructor is private
        charRange = CharRange.isNot('a');
    }

    @Test
    public void testIsNegated_PositiveCase() {
        // Scenario where range is negated
        assertTrue(charRange.isNegated());
    }

    @Test
    public void testIsNegated_NegativeCase() {
        // Creating a non-negated range
        CharRange nonNegatedRange = CharRange.is('a');
        assertFalse(nonNegatedRange.isNegated());
    }
}
","org/apache/commons/lang3/CharRange_boolean_isNegated_Test.java","","file_not_found"
"org.apache.commons.lang3.CharRange.isNot(char)","org.apache.commons.lang3.CharRange isNot(char)","{
    char ch;
    unknown $stack1;


    ch := @parameter0: char;
    $stack1 = new org.apache.commons.lang3.CharRange;
    specialinvoke $stack1.<org.apache.commons.lang3.CharRange: void <init>(char,char,boolean)>(ch, ch, 1);

    return $stack1;
}
","false","PUBLIC STATIC","","<p>Constructs a negated {@code CharRange} over a single character.</p>
@param ch only character in this range
@return the new CharRange object
@see CharRange#CharRange(char, char, boolean)
@since 2.5","implements java.io.Serializable, java.lang.Iterable","PRIVATE FINAL char start; PRIVATE FINAL boolean negated; PRIVATE TRANSIENT java.lang.String iToString; PRIVATE STATIC FINAL long serialVersionUID; PRIVATE FINAL char end","0","0","","true","private","is(char), isNot(char), isIn(char,char), isNotIn(char,char)","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_Char_isNot_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        // Setup any necessary resources before each test if needed
    }

    @Test
    public void testIsNotWithTypicalValue() {
        charRange = CharRange.isNot('a');
        assertTrue(charRange.contains('b'));
        assertFalse(charRange.contains('a'));
    }

    @Test
    public void testIsNotWithBoundaryValue() {
        charRange = CharRange.isNot(Character.MAX_VALUE);
        assertTrue(charRange.contains(Character.MAX_VALUE - 1));
        assertFalse(charRange.contains(Character.MAX_VALUE));

        charRange = CharRange.isNot(Character.MIN_VALUE);
        assertTrue(charRange.contains((char) (Character.MIN_VALUE + 1)));
        assertFalse(charRange.contains(Character.MIN_VALUE));
    }

    @Test
    public void testIsNotWithEdgeCase() {
        charRange = CharRange.isNot(' ');
        assertTrue(charRange.contains('a'));
        assertFalse(charRange.contains(' '));
    }

    // Testing null inputs is not applicable to primitive types like char
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_Char_isNot_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        // Setup any necessary resources before each test if needed
    }

    @Test
    public void testIsNotWithTypicalValue() {
        charRange = CharRange.isNot('a');
        assertTrue(charRange.contains('b'));
        assertFalse(charRange.contains('a'));
    }

    @Test
    public void testIsNotWithBoundaryValue() {
        charRange = CharRange.isNot(Character.MAX_VALUE);
        assertTrue(charRange.contains(Character.MAX_VALUE - 1));
        assertFalse(charRange.contains(Character.MAX_VALUE));

        charRange = CharRange.isNot(Character.MIN_VALUE);
        assertTrue(charRange.contains((char) (Character.MIN_VALUE + 1)));
        assertFalse(charRange.contains(Character.MIN_VALUE));
    }

    @Test
    public void testIsNotWithEdgeCase() {
        charRange = CharRange.isNot(' ');
        assertTrue(charRange.contains('a'));
        assertFalse(charRange.contains(' '));
    }

    // Testing null inputs is not applicable to primitive types like char
}
","org/apache/commons/lang3/CharRange_Char_isNot_Test.java","","file_not_found"
"org.apache.commons.lang3.CharRange.iterator()","java.util.Iterator iterator()","{
    org.apache.commons.lang3.CharRange this;
    unknown $stack1;


    this := @this: org.apache.commons.lang3.CharRange;
    $stack1 = new org.apache.commons.lang3.CharRange$CharacterIterator;
    specialinvoke $stack1.<org.apache.commons.lang3.CharRange$CharacterIterator: void <init>(org.apache.commons.lang3.CharRange,org.apache.commons.lang3.CharRange$CharacterIterator)>(this, null);

    return $stack1;
}
","false","PUBLIC","Override","<p>Returns an iterator which can be used to walk through the characters described by this range.</p>

<p>#NotThreadSafe# the iterator is not thread-safe</p>
@return an iterator to the chars represented by this range
@since 2.5","implements java.io.Serializable, java.lang.Iterable","PRIVATE FINAL char start; PRIVATE FINAL boolean negated; PRIVATE TRANSIENT java.lang.String iToString; PRIVATE STATIC FINAL long serialVersionUID; PRIVATE FINAL char end","0","0","","","private","is(char), isNot(char), isIn(char,char), isNotIn(char,char)","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import java.util.Iterator;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_Iterator_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        charRange = new CharRange('a', 'c');
    }

    @Test
    public void testIteratorTypicalUseCase() {
        Iterator<Character> iterator = charRange.iterator();
        assertTrue(iterator.hasNext());
        assertEquals(Character.valueOf('a'), iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals(Character.valueOf('b'), iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals(Character.valueOf('c'), iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    public void testIteratorSingleElement() {
        charRange = new CharRange('a', 'a');
        Iterator<Character> iterator = charRange.iterator();
        assertTrue(iterator.hasNext());
        assertEquals(Character.valueOf('a'), iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    public void testIteratorEdgeCaseEmptyRange() {
        charRange = new CharRange('b', 'a'); // typically invalid range in some implementations
        Iterator<Character> iterator = charRange.iterator();
        assertFalse(iterator.hasNext());
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import java.util.Iterator;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_Iterator_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        charRange = new CharRange('a', 'c');
    }

    @Test
    public void testIteratorTypicalUseCase() {
        Iterator<Character> iterator = charRange.iterator();
        assertTrue(iterator.hasNext());
        assertEquals(Character.valueOf('a'), iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals(Character.valueOf('b'), iterator.next());
        assertTrue(iterator.hasNext());
        assertEquals(Character.valueOf('c'), iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    public void testIteratorSingleElement() {
        charRange = new CharRange('a', 'a');
        Iterator<Character> iterator = charRange.iterator();
        assertTrue(iterator.hasNext());
        assertEquals(Character.valueOf('a'), iterator.next());
        assertFalse(iterator.hasNext());
    }

    @Test
    public void testIteratorEdgeCaseEmptyRange() {
        charRange = new CharRange('b', 'a'); // typically invalid range in some implementations
        Iterator<Character> iterator = charRange.iterator();
        assertFalse(iterator.hasNext());
    }
}
","org/apache/commons/lang3/CharRange_Iterator_Test.java","","file_not_found"
"org.apache.commons.lang3.CharRange.is(char)","org.apache.commons.lang3.CharRange is(char)","{
    char ch;
    unknown $stack1;


    ch := @parameter0: char;
    $stack1 = new org.apache.commons.lang3.CharRange;
    specialinvoke $stack1.<org.apache.commons.lang3.CharRange: void <init>(char,char,boolean)>(ch, ch, 0);

    return $stack1;
}
","false","PUBLIC STATIC","","<p>Constructs a {@code CharRange} over a single character.</p>
@param ch only character in this range
@return the new CharRange object
@see CharRange#CharRange(char, char, boolean)
@since 2.5","implements java.io.Serializable, java.lang.Iterable","PRIVATE FINAL char start; PRIVATE FINAL boolean negated; PRIVATE TRANSIENT java.lang.String iToString; PRIVATE STATIC FINAL long serialVersionUID; PRIVATE FINAL char end","0","0","","false","private","is(char), isNot(char), isIn(char,char), isNotIn(char,char)","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_is_char_Test {

    private char singleChar;
    private CharRange charRange;

    @Before
    public void setUp() {
        this.singleChar = 'a';
        this.charRange = CharRange.is(singleChar);
    }

    @Test
    public void testSingleCharInRange() {
        assertTrue(charRange.contains(singleChar));
    }

    @Test
    public void testCharNotInRange() {
        assertFalse(charRange.contains('b'));
    }

    @Test
    public void testRangeWithSameChar() {
        CharRange sameCharRange = CharRange.is('a');
        assertEquals(charRange, sameCharRange);
    }

    @Test
    public void testEdgeCaseMinChar() {
        CharRange minCharRange = CharRange.is(Character.MIN_VALUE);
        assertTrue(minCharRange.contains(Character.MIN_VALUE));
        assertFalse(minCharRange.contains('a'));
    }

    @Test
    public void testEdgeCaseMaxChar() {
        CharRange maxCharRange = CharRange.is(Character.MAX_VALUE);
        assertTrue(maxCharRange.contains(Character.MAX_VALUE));
        assertFalse(maxCharRange.contains('a'));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testNullInput() {
        CharRange nullCharRange = CharRange.is((Character) null);
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_is_char_Test {

    private char singleChar;
    private CharRange charRange;

    @Before
    public void setUp() {
        this.singleChar = 'a';
        this.charRange = CharRange.is(singleChar);
    }

    @Test
    public void testSingleCharInRange() {
        assertTrue(charRange.contains(singleChar));
    }

    @Test
    public void testCharNotInRange() {
        assertFalse(charRange.contains('b'));
    }

    @Test
    public void testRangeWithSameChar() {
        CharRange sameCharRange = CharRange.is('a');
        assertEquals(charRange, sameCharRange);
    }

    @Test
    public void testEdgeCaseMinChar() {
        CharRange minCharRange = CharRange.is(Character.MIN_VALUE);
        assertTrue(minCharRange.contains(Character.MIN_VALUE));
        assertFalse(minCharRange.contains('a'));
    }

    @Test
    public void testEdgeCaseMaxChar() {
        CharRange maxCharRange = CharRange.is(Character.MAX_VALUE);
        assertTrue(maxCharRange.contains(Character.MAX_VALUE));
        assertFalse(maxCharRange.contains('a'));
    }

    @Test(expected = IllegalArgumentException.class)
    public void testNullInput() {
        CharRange nullCharRange = CharRange.is((Character) null);
    }
}
","org/apache/commons/lang3/CharRange_is_char_Test.java","","file_not_found"
"org.apache.commons.lang3.CharRange.getStart()","char getStart()","{
    org.apache.commons.lang3.CharRange this;
    unknown $stack1;


    this := @this: org.apache.commons.lang3.CharRange;
    $stack1 = this.<org.apache.commons.lang3.CharRange: char start>;

    return $stack1;
}
","false","PUBLIC","","<p>Gets the start character for this character range.</p>
@return the start char (inclusive)","implements java.io.Serializable, java.lang.Iterable","PRIVATE FINAL char start; PRIVATE FINAL boolean negated; PRIVATE TRANSIENT java.lang.String iToString; PRIVATE STATIC FINAL long serialVersionUID; PRIVATE FINAL char end","0","0","","","private","is(char), isNot(char), isIn(char,char), isNotIn(char,char)","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.assertEquals;

@RunWith(JUnit4.class)
public class CharRange_char_getStart_Test {

    private CharRange charRange;
    
    @Before
    public void setUp() {
        charRange = CharRange.is('a');
    }

    @Test
    public void testGetStartTypicalCase() {
        assertEquals('a', charRange.getStart());
    }

    @Test
    public void testGetStartEdgeCase() {
        CharRange edgeCaseRange = CharRange.is('\0');
        assertEquals('\0', edgeCaseRange.getStart());
    }

    @Test
    public void testGetStartBoundaryCase() {
        CharRange boundaryCaseRange = CharRange.is(Character.MAX_VALUE);
        assertEquals(Character.MAX_VALUE, boundaryCaseRange.getStart());
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.assertEquals;

@RunWith(JUnit4.class)
public class CharRange_char_getStart_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        charRange = CharRange.is('a');
    }

    @Test
    public void testGetStartTypicalCase() {
        assertEquals('a', charRange.getStart());
    }

    @Test
    public void testGetStartEdgeCase() {
        CharRange edgeCaseRange = CharRange.is('\0');
        assertEquals('\0', edgeCaseRange.getStart());
    }

    @Test
    public void testGetStartBoundaryCase() {
        CharRange boundaryCaseRange = CharRange.is(Character.MAX_VALUE);
        assertEquals(Character.MAX_VALUE, boundaryCaseRange.getStart());
    }
}
","org/apache/commons/lang3/CharRange_char_getStart_Test.java","","file_not_found"
"org.apache.commons.lang3.CharRange.equals(java.lang.Object)","boolean equals(java.lang.Object)","{
    java.lang.Object obj;
    org.apache.commons.lang3.CharRange this;
    unknown $stack10, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, other;


    this := @this: org.apache.commons.lang3.CharRange;
    obj := @parameter0: java.lang.Object;

    if obj != this goto label1;

    return 1;

  label1:
    $stack3 = obj instanceof org.apache.commons.lang3.CharRange;

    if $stack3 != 0 goto label2;

    return 0;

  label2:
    other = (org.apache.commons.lang3.CharRange) obj;
    $stack5 = this.<org.apache.commons.lang3.CharRange: char start>;
    $stack4 = other.<org.apache.commons.lang3.CharRange: char start>;

    if $stack5 != $stack4 goto label3;
    $stack7 = this.<org.apache.commons.lang3.CharRange: char end>;
    $stack6 = other.<org.apache.commons.lang3.CharRange: char end>;

    if $stack7 != $stack6 goto label3;
    $stack10 = this.<org.apache.commons.lang3.CharRange: boolean negated>;
    $stack9 = other.<org.apache.commons.lang3.CharRange: boolean negated>;

    if $stack10 != $stack9 goto label3;

    return 1;

  label3:
    $stack8 = 0;

    return $stack8;
}
","false","PUBLIC","Override","<p>Compares two CharRange objects, returning true if they represent
exactly the same range of characters defined in the same way.</p>
@param obj the object to compare to
@return true if equal","implements java.io.Serializable, java.lang.Iterable","PRIVATE FINAL char start; PRIVATE FINAL boolean negated; PRIVATE TRANSIENT java.lang.String iToString; PRIVATE STATIC FINAL long serialVersionUID; PRIVATE FINAL char end","0","2","","true, false","private","is(char), isNot(char), isIn(char,char), isNotIn(char,char)","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_boolean_equals_Object_Test {

    private CharRange charRangeA;
    private CharRange charRangeB;
    private CharRange charRangeC;

    @Before
    public void setUp() {
        charRangeA = CharRange.is('a');
        charRangeB = CharRange.isIn('a', 'z');
        charRangeC = CharRange.isNot('a');
    }

    @Test
    public void testEquals_sameObject() {
        assertTrue(charRangeA.equals(charRangeA));
    }

    @Test
    public void testEquals_equalRanges() {
        CharRange range = CharRange.is('a');
        assertTrue(charRangeA.equals(range));
    }

    @Test
    public void testEquals_differentStart() {
        assertFalse(charRangeA.equals(charRangeB));
    }

    @Test
    public void testEquals_differentEnd() {
        CharRange range = CharRange.isIn('a', 'y');
        assertFalse(charRangeB.equals(range));
    }

    @Test
    public void testEquals_differentNegation() {
        assertFalse(charRangeA.equals(charRangeC));
    }

    @Test
    public void testEquals_nullObject() {
        assertFalse(charRangeA.equals(null));
    }

    @Test
    public void testEquals_differentObjectType() {
        assertFalse(charRangeA.equals(new Object()));
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_boolean_equals_Object_Test {

    private CharRange charRangeA;
    private CharRange charRangeB;
    private CharRange charRangeC;

    @Before
    public void setUp() {
        charRangeA = CharRange.is('a');
        charRangeB = CharRange.isIn('a', 'z');
        charRangeC = CharRange.isNot('a');
    }

    @Test
    public void testEquals_sameObject() {
        assertTrue(charRangeA.equals(charRangeA));
    }

    @Test
    public void testEquals_equalRanges() {
        CharRange range = CharRange.is('a');
        assertTrue(charRangeA.equals(range));
    }

    @Test
    public void testEquals_differentStart() {
        assertFalse(charRangeA.equals(charRangeB));
    }

    @Test
    public void testEquals_differentEnd() {
        CharRange range = CharRange.isIn('a', 'y');
        assertFalse(charRangeB.equals(range));
    }

    @Test
    public void testEquals_differentNegation() {
        assertFalse(charRangeA.equals(charRangeC));
    }

    @Test
    public void testEquals_nullObject() {
        assertFalse(charRangeA.equals(null));
    }

    @Test
    public void testEquals_differentObjectType() {
        assertFalse(charRangeA.equals(new Object()));
    }
}
","org/apache/commons/lang3/CharRange_boolean_equals_Object_Test.java","","file_not_found"
"org.apache.commons.lang3.CharRange.contains(org.apache.commons.lang3.CharRange)","boolean contains(org.apache.commons.lang3.CharRange)","{
    org.apache.commons.lang3.CharRange range, this;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack2, $stack20, $stack21, $stack22, $stack23, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9;


    this := @this: org.apache.commons.lang3.CharRange;
    range := @parameter0: org.apache.commons.lang3.CharRange;

    if range != null goto label1;
    $stack23 = new java.lang.IllegalArgumentException;
    specialinvoke $stack23.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>(""The Range must not be null"");

    throw $stack23;

  label1:
    $stack2 = this.<org.apache.commons.lang3.CharRange: boolean negated>;

    if $stack2 == 0 goto label3;
    $stack12 = range.<org.apache.commons.lang3.CharRange: boolean negated>;

    if $stack12 == 0 goto label2;
    $stack19 = this.<org.apache.commons.lang3.CharRange: char start>;
    $stack18 = range.<org.apache.commons.lang3.CharRange: char start>;

    if $stack19 < $stack18 goto label5;
    $stack21 = this.<org.apache.commons.lang3.CharRange: char end>;
    $stack20 = range.<org.apache.commons.lang3.CharRange: char end>;

    if $stack21 > $stack20 goto label5;

    return 1;

  label2:
    $stack14 = range.<org.apache.commons.lang3.CharRange: char end>;
    $stack13 = this.<org.apache.commons.lang3.CharRange: char start>;

    if $stack14 < $stack13 goto label6;
    $stack16 = range.<org.apache.commons.lang3.CharRange: char start>;
    $stack15 = this.<org.apache.commons.lang3.CharRange: char end>;

    if $stack16 > $stack15 goto label6;

    return 0;

  label3:
    $stack3 = range.<org.apache.commons.lang3.CharRange: boolean negated>;

    if $stack3 == 0 goto label4;
    $stack9 = this.<org.apache.commons.lang3.CharRange: char start>;

    if $stack9 != 0 goto label7;
    $stack10 = this.<org.apache.commons.lang3.CharRange: char end>;

    if $stack10 != 65535 goto label7;

    return 1;

  label4:
    $stack5 = this.<org.apache.commons.lang3.CharRange: char start>;
    $stack4 = range.<org.apache.commons.lang3.CharRange: char start>;

    if $stack5 > $stack4 goto label8;
    $stack7 = this.<org.apache.commons.lang3.CharRange: char end>;
    $stack6 = range.<org.apache.commons.lang3.CharRange: char end>;

    if $stack7 < $stack6 goto label8;

    return 1;

  label5:
    $stack22 = 0;

    return $stack22;

  label6:
    $stack17 = 1;

    return $stack17;

  label7:
    $stack11 = 0;

    return $stack11;

  label8:
    $stack8 = 0;

    return $stack8;
}
","false","PUBLIC","","<p>Is the character specified contained in this range.</p>
@param ch the character to check
@return {@code true} if this range contains the input character","implements java.io.Serializable, java.lang.Iterable","PRIVATE FINAL char start; PRIVATE FINAL boolean negated; PRIVATE TRANSIENT java.lang.String iToString; PRIVATE STATIC FINAL long serialVersionUID; PRIVATE FINAL char end","0","0","","","private","is(char), isNot(char), isIn(char,char), isNotIn(char,char)","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_boolean_contains_CharRange_Test {

    private CharRange range1;
    private CharRange range2;

    @Before
    public void setUp() {
        range1 = CharRange.is('a');
        range2 = CharRange.is('b');
    }

    @Test
    public void testContains_SameRange() {
        CharRange range = CharRange.is('a');
        assertTrue(range.contains(range));
    }

    @Test
    public void testContains_NullRange() {
        try {
            range1.contains(null);
            fail(""Expected IllegalArgumentException"");
        } catch (IllegalArgumentException e) {
            assertEquals(""The Range must not be null"", e.getMessage());
        }
    }

    @Test
    public void testContains_DifferentRanges_NonNegated() {
        CharRange rangeA = CharRange.isIn('a', 'c');
        CharRange rangeB = CharRange.is('b');
        assertTrue(rangeA.contains(rangeB));
    }

    @Test
    public void testContains_DifferentRanges_Negated() {
        CharRange rangeA = CharRange.isNotIn('d', 'f');
        CharRange rangeB = CharRange.isIn('a', 'z');
        assertFalse(rangeA.contains(rangeB));
    }

    @Test
    public void testContains_BoundaryCondition() {
        CharRange rangeA = CharRange.is('a');
        CharRange rangeB = CharRange.is('a');
        assertTrue(rangeA.contains(rangeB));
    }

    @Test
    public void testContains_OutOfRange() {
        CharRange rangeA = CharRange.is('a');
        CharRange rangeB = CharRange.is('b');
        assertFalse(rangeA.contains(rangeB));
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_boolean_contains_CharRange_Test {

    private CharRange range1;
    private CharRange range2;

    @Before
    public void setUp() {
        range1 = CharRange.is('a');
        range2 = CharRange.is('b');
    }

    @Test
    public void testContains_SameRange() {
        CharRange range = CharRange.is('a');
        assertTrue(range.contains(range));
    }

    @Test
    public void testContains_NullRange() {
        try {
            range1.contains(null);
            fail(""Expected IllegalArgumentException"");
        } catch (IllegalArgumentException e) {
            assertEquals(""The Range must not be null"", e.getMessage());
        }
    }

    @Test
    public void testContains_DifferentRanges_NonNegated() {
        CharRange rangeA = CharRange.isIn('a', 'c');
        CharRange rangeB = CharRange.is('b');
        assertTrue(rangeA.contains(rangeB));
    }

    @Test
    public void testContains_DifferentRanges_Negated() {
        CharRange rangeA = CharRange.isNotIn('d', 'f');
        CharRange rangeB = CharRange.isIn('a', 'z');
        assertFalse(rangeA.contains(rangeB));
    }

    @Test
    public void testContains_BoundaryCondition() {
        CharRange rangeA = CharRange.is('a');
        CharRange rangeB = CharRange.is('a');
        assertTrue(rangeA.contains(rangeB));
    }

    @Test
    public void testContains_OutOfRange() {
        CharRange rangeA = CharRange.is('a');
        CharRange rangeB = CharRange.is('b');
        assertFalse(rangeA.contains(rangeB));
    }
}
","org/apache/commons/lang3/CharRange_boolean_contains_CharRange_Test.java","","file_not_found"
"org.apache.commons.lang3.CharRange.contains(char)","boolean contains(char)","{
    char ch;
    org.apache.commons.lang3.CharRange this;
    unknown $stack2, $stack3, $stack4, $stack5, $stack6, $stack7;


    this := @this: org.apache.commons.lang3.CharRange;
    ch := @parameter0: char;
    $stack2 = this.<org.apache.commons.lang3.CharRange: char start>;

    if ch < $stack2 goto label1;
    $stack5 = this.<org.apache.commons.lang3.CharRange: char end>;

    if ch > $stack5 goto label1;
    $stack7 = 1;

    goto label2;

  label1:
    $stack7 = 0;

  label2:
    $stack6 = this;
    $stack3 = this.<org.apache.commons.lang3.CharRange: boolean negated>;
    $stack4 = $stack7 ^ $stack3;

    return $stack4;
}
","false","PUBLIC","","<p>Is the character specified contained in this range.</p>
@param ch the character to check
@return {@code true} if this range contains the input character","implements java.io.Serializable, java.lang.Iterable","PRIVATE FINAL char start; PRIVATE FINAL boolean negated; PRIVATE TRANSIENT java.lang.String iToString; PRIVATE STATIC FINAL long serialVersionUID; PRIVATE FINAL char end","0","0","","","private","is(char), isNot(char), isIn(char,char), isNotIn(char,char)","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_boolean_contains_char_Test {

    private CharRange charRange;
    private CharRange negatedCharRange;

    @Before
    public void setUp() {
        charRange = CharRange.isIn('a', 'z');
        negatedCharRange = CharRange.isNotIn('a', 'z');
    }

    @Test
    public void testContainsWithinRange() {
        assertTrue(charRange.contains('a'));
        assertTrue(charRange.contains('m'));
        assertTrue(charRange.contains('z'));
    }

    @Test
    public void testContainsOutsideRange() {
        assertFalse(charRange.contains('A'));
        assertFalse(charRange.contains('0'));
        assertFalse(charRange.contains('!'));
    }

    @Test
    public void testContainsNegated() {
        assertFalse(negatedCharRange.contains('a'));
        assertFalse(negatedCharRange.contains('m'));
        assertFalse(negatedCharRange.contains('z'));
        assertTrue(negatedCharRange.contains('A'));
        assertTrue(negatedCharRange.contains('0'));
    }

    @Test
    public void testContainsEmptyRange() {
        CharRange emptyRange = CharRange.isIn('x', 'x');
        assertTrue(emptyRange.contains('x'));
        assertFalse(emptyRange.contains('y'));
    }

    @Test
    public void testContainsAllRange() {
        CharRange fullRange = CharRange.isIn(Character.MIN_VALUE, Character.MAX_VALUE);
        assertTrue(fullRange.contains('a'));
        assertTrue(fullRange.contains('Z'));
        assertTrue(fullRange.contains(Character.MIN_VALUE));
        assertTrue(fullRange.contains(Character.MAX_VALUE));
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_boolean_contains_char_Test {

    private CharRange charRange;
    private CharRange negatedCharRange;

    @Before
    public void setUp() {
        charRange = CharRange.isIn('a', 'z');
        negatedCharRange = CharRange.isNotIn('a', 'z');
    }

    @Test
    public void testContainsWithinRange() {
        assertTrue(charRange.contains('a'));
        assertTrue(charRange.contains('m'));
        assertTrue(charRange.contains('z'));
    }

    @Test
    public void testContainsOutsideRange() {
        assertFalse(charRange.contains('A'));
        assertFalse(charRange.contains('0'));
        assertFalse(charRange.contains('!'));
    }

    @Test
    public void testContainsNegated() {
        assertFalse(negatedCharRange.contains('a'));
        assertFalse(negatedCharRange.contains('m'));
        assertFalse(negatedCharRange.contains('z'));
        assertTrue(negatedCharRange.contains('A'));
        assertTrue(negatedCharRange.contains('0'));
    }

    @Test
    public void testContainsEmptyRange() {
        CharRange emptyRange = CharRange.isIn('x', 'x');
        assertTrue(emptyRange.contains('x'));
        assertFalse(emptyRange.contains('y'));
    }

    @Test
    public void testContainsAllRange() {
        CharRange fullRange = CharRange.isIn(Character.MIN_VALUE, Character.MAX_VALUE);
        assertTrue(fullRange.contains('a'));
        assertTrue(fullRange.contains('Z'));
        assertTrue(fullRange.contains(Character.MIN_VALUE));
        assertTrue(fullRange.contains(Character.MAX_VALUE));
    }
}
","org/apache/commons/lang3/CharRange_boolean_contains_char_Test.java","","file_not_found"
"org.apache.commons.lang3.CharRange.CharRange(char, char, boolean)","void CharRange(char, char, boolean)","{
    boolean negated;
    char end, start;
    org.apache.commons.lang3.CharRange this;
    unknown $stack10, $stack5, $stack6, $stack7, $stack8, $stack9, temp;


    this := @this: org.apache.commons.lang3.CharRange;
    start := @parameter0: char;
    end := @parameter1: char;
    negated := @parameter2: boolean;
    specialinvoke this.<java.lang.Object: void <init>()>();

    if start <= end goto label1;
    temp = start;
    start = end;
    end = temp;

  label1:
    $stack6 = this;
    $stack5 = start;
    this.<org.apache.commons.lang3.CharRange: char start> = $stack5;
    $stack8 = this;
    $stack7 = end;
    this.<org.apache.commons.lang3.CharRange: char end> = $stack7;
    $stack10 = this;
    $stack9 = negated;
    this.<org.apache.commons.lang3.CharRange: boolean negated> = $stack9;

    return;
}
","true","PRIVATE","","<p>Constructs a {@code CharRange} over a set of characters,
optionally negating the range.</p>

<p>A negated range includes everything except that defined by the
start and end characters.</p>

<p>If start and end are in the wrong order, they are reversed.
Thus {@code a-e} is the same as {@code e-a}.</p>
@param start first character, inclusive, in this range
@param end last character, inclusive, in this range
@param negated true to express everything except the range","implements java.io.Serializable, java.lang.Iterable","PRIVATE FINAL char start; PRIVATE FINAL boolean negated; PRIVATE TRANSIENT java.lang.String iToString; PRIVATE STATIC FINAL long serialVersionUID; PRIVATE FINAL char end","0","1","","","private","is(char), isNot(char), isIn(char,char), isNotIn(char,char)","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class CharRange_void_CharRange_char_char_boolean_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        // Here, we'd normally use a public static factory method if available,
        // but since none is provided, we cannot instantiate CharRange directly due to private constructor.
        // Therefore, we cannot write test methods as per the provided rules.
        // Test methods can only be created when there is a public constructor or factory method available.
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class CharRange_void_CharRange_char_char_boolean_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        // Here, we'd normally use a public static factory method if available,
        // but since none is provided, we cannot instantiate CharRange directly due to private constructor.
        // Therefore, we cannot write test methods as per the provided rules.
        // Test methods can only be created when there is a public constructor or factory method available.
    }
}
","org/apache/commons/lang3/CharRange_void_CharRange_char_char_boolean_Test.java","","file_not_found"
"org.apache.commons.lang3.CharRange.isNotIn(char, char)","org.apache.commons.lang3.CharRange isNotIn(char, char)","{
    char end, start;
    unknown $stack2;


    start := @parameter0: char;
    end := @parameter1: char;
    $stack2 = new org.apache.commons.lang3.CharRange;
    specialinvoke $stack2.<org.apache.commons.lang3.CharRange: void <init>(char,char,boolean)>(start, end, 1);

    return $stack2;
}
","false","PUBLIC STATIC","","<p>Constructs a negated {@code CharRange} over a set of characters.</p>
@param start first character, inclusive, in this range
@param end last character, inclusive, in this range
@return the new CharRange object
@see CharRange#CharRange(char, char, boolean)
@since 2.5","implements java.io.Serializable, java.lang.Iterable","PRIVATE FINAL char start; PRIVATE FINAL boolean negated; PRIVATE TRANSIENT java.lang.String iToString; PRIVATE STATIC FINAL long serialVersionUID; PRIVATE FINAL char end","0","0","","true","private","is(char), isNot(char), isIn(char,char), isNotIn(char,char)","```java
package org.apache.commons.lang3;

import org.junit.Test;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_isNotIn_char_char_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        // Set up any common test data if needed
    }

    @Test
    public void testTypicalUseCase() {
        char start = 'a';
        char end = 'z';
        CharRange result = CharRange.isNotIn(start, end);
        
        assertNotNull(result);
        assertTrue(result.isNegated());
        assertEquals(start, result.getStart());
        assertEquals(end, result.getEnd());
    }

    @Test
    public void testEdgeCaseSingleCharacter() {
        char start = 'a';
        char end = 'a';
        CharRange result = CharRange.isNotIn(start, end);

        assertNotNull(result);
        assertTrue(result.isNegated());
        assertEquals(start, result.getStart());
        assertEquals(end, result.getEnd());
    }

    @Test
    public void testErrorCaseNullCharRange() {
        try {
            CharRange result = CharRange.isNotIn('\0', '\0');
            assertNotNull(result);
        } catch (Exception e) {
            fail(""Exception should not be thrown for null char range: "" + e.getMessage());
        }
    }

    @Test
    public void testBoundaryCaseMaxAndMinValue() {
        char start = Character.MIN_VALUE;
        char end = Character.MAX_VALUE;

        CharRange result = CharRange.isNotIn(start, end);

        assertNotNull(result);
        assertTrue(result.isNegated());
        assertEquals(start, result.getStart());
        assertEquals(end, result.getEnd());
    }

    @Test
    public void testTypicalInverseRange() {
        char start = 'z';
        char end = 'a';

        CharRange result = CharRange.isNotIn(start, end);

        assertNotNull(result);
        assertTrue(result.isNegated());
        // Test when start is greater than end
        assertEquals(start, result.getStart());
        assertEquals(end, result.getEnd());
    }
}
```","package org.apache.commons.lang3;

import org.junit.Test;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_isNotIn_char_char_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        // Set up any common test data if needed
    }

    @Test
    public void testTypicalUseCase() {
        char start = 'a';
        char end = 'z';
        CharRange result = CharRange.isNotIn(start, end);

        assertNotNull(result);
        assertTrue(result.isNegated());
        assertEquals(start, result.getStart());
        assertEquals(end, result.getEnd());
    }

    @Test
    public void testEdgeCaseSingleCharacter() {
        char start = 'a';
        char end = 'a';
        CharRange result = CharRange.isNotIn(start, end);

        assertNotNull(result);
        assertTrue(result.isNegated());
        assertEquals(start, result.getStart());
        assertEquals(end, result.getEnd());
    }

    @Test
    public void testErrorCaseNullCharRange() {
        try {
            CharRange result = CharRange.isNotIn('\0', '\0');
            assertNotNull(result);
        } catch (Exception e) {
            fail(""Exception should not be thrown for null char range: "" + e.getMessage());
        }
    }

    @Test
    public void testBoundaryCaseMaxAndMinValue() {
        char start = Character.MIN_VALUE;
        char end = Character.MAX_VALUE;

        CharRange result = CharRange.isNotIn(start, end);

        assertNotNull(result);
        assertTrue(result.isNegated());
        assertEquals(start, result.getStart());
        assertEquals(end, result.getEnd());
    }

    @Test
    public void testTypicalInverseRange() {
        char start = 'z';
        char end = 'a';

        CharRange result = CharRange.isNotIn(start, end);

        assertNotNull(result);
        assertTrue(result.isNegated());
        // Test when start is greater than end
        assertEquals(start, result.getStart());
        assertEquals(end, result.getEnd());
    }
}
","org/apache/commons/lang3/CharRange_isNotIn_char_char_Test.java","","file_not_found"
"org.apache.commons.lang3.CharRange.isIn(char, char)","org.apache.commons.lang3.CharRange isIn(char, char)","{
    char end, start;
    unknown $stack2;


    start := @parameter0: char;
    end := @parameter1: char;
    $stack2 = new org.apache.commons.lang3.CharRange;
    specialinvoke $stack2.<org.apache.commons.lang3.CharRange: void <init>(char,char,boolean)>(start, end, 0);

    return $stack2;
}
","false","PUBLIC STATIC","","<p>Constructs a {@code CharRange} over a set of characters.</p>
@param start first character, inclusive, in this range
@param end last character, inclusive, in this range
@return the new CharRange object
@see CharRange#CharRange(char, char, boolean)
@since 2.5","implements java.io.Serializable, java.lang.Iterable","PRIVATE FINAL char start; PRIVATE FINAL boolean negated; PRIVATE TRANSIENT java.lang.String iToString; PRIVATE STATIC FINAL long serialVersionUID; PRIVATE FINAL char end","0","0","","false","private","is(char), isNot(char), isIn(char,char), isNotIn(char,char)","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_isIn_char_char_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        // Use factory method or public constructor to instantiate if necessary
        // Unable to instantiate CharRange as constructor is private, testing static methods.
    }

    @Test
    public void testTypicalCase_WithinRange() {
        char start = 'a';
        char end = 'z';
        charRange = CharRange.isIn(start, end);

        assertTrue(charRange.contains('m'));
    }

    @Test
    public void testTypicalCase_ExactStart() {
        char start = 'a';
        char end = 'z';
        charRange = CharRange.isIn(start, end);

        assertTrue(charRange.contains(start));
    }

    @Test
    public void testTypicalCase_ExactEnd() {
        char start = 'a';
        char end = 'z';
        charRange = CharRange.isIn(start, end);

        assertTrue(charRange.contains(end));
    }

    @Test
    public void testEdgeCase_StartGreaterThanEnd() {
        char start = 'z';
        char end = 'a';
        charRange = CharRange.isIn(start, end);

        assertFalse(charRange.contains('m'));
    }

    @Test
    public void testEdgeCase_EmptyRange() {
        char start = 'a';
        char end = 'a';
        charRange = CharRange.isIn(start, end);

        assertTrue(charRange.contains('a'));
        assertFalse(charRange.contains('b'));
    }

    @Test
    public void testErrorCase_NullCharacter() {
        try {
            charRange = CharRange.isIn('\0', '\0');
            assertFalse(charRange.contains('a'));
            assertTrue(charRange.contains('\0'));
        } catch (Exception e) {
            fail(""Exception should not be thrown for null character"");
        }
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_isIn_char_char_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        // Use factory method or public constructor to instantiate if necessary
        // Unable to instantiate CharRange as constructor is private, testing static methods.
    }

    @Test
    public void testTypicalCase_WithinRange() {
        char start = 'a';
        char end = 'z';
        charRange = CharRange.isIn(start, end);

        assertTrue(charRange.contains('m'));
    }

    @Test
    public void testTypicalCase_ExactStart() {
        char start = 'a';
        char end = 'z';
        charRange = CharRange.isIn(start, end);

        assertTrue(charRange.contains(start));
    }

    @Test
    public void testTypicalCase_ExactEnd() {
        char start = 'a';
        char end = 'z';
        charRange = CharRange.isIn(start, end);

        assertTrue(charRange.contains(end));
    }

    @Test
    public void testEdgeCase_StartGreaterThanEnd() {
        char start = 'z';
        char end = 'a';
        charRange = CharRange.isIn(start, end);

        assertFalse(charRange.contains('m'));
    }

    @Test
    public void testEdgeCase_EmptyRange() {
        char start = 'a';
        char end = 'a';
        charRange = CharRange.isIn(start, end);

        assertTrue(charRange.contains('a'));
        assertFalse(charRange.contains('b'));
    }

    @Test
    public void testErrorCase_NullCharacter() {
        try {
            charRange = CharRange.isIn('\0', '\0');
            assertFalse(charRange.contains('a'));
            assertTrue(charRange.contains('\0'));
        } catch (Exception e) {
            fail(""Exception should not be thrown for null character"");
        }
    }
}
","org/apache/commons/lang3/CharRange_isIn_char_char_Test.java","","file_not_found"
"org.apache.commons.lang3.CharRange.getEnd()","char getEnd()","{
    org.apache.commons.lang3.CharRange this;
    unknown $stack1;


    this := @this: org.apache.commons.lang3.CharRange;
    $stack1 = this.<org.apache.commons.lang3.CharRange: char end>;

    return $stack1;
}
","false","PUBLIC","","<p>Gets the end character for this character range.</p>
@return the end char (inclusive)","implements java.io.Serializable, java.lang.Iterable","PRIVATE FINAL char start; PRIVATE FINAL boolean negated; PRIVATE TRANSIENT java.lang.String iToString; PRIVATE STATIC FINAL long serialVersionUID; PRIVATE FINAL char end","0","0","","","private","is(char), isNot(char), isIn(char,char), isNotIn(char,char)","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_char_getEnd_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        charRange = CharRange.is('a'); // Using static factory method to instantiate.
    }

    @Test
    public void testTypicalUseCase() {
        assertEquals('a', charRange.getEnd());
    }

    @Test
    public void testEdgeCase_EmptyRange() {
        charRange = CharRange.is('\0'); // Check with zero/null char value
        assertEquals('\0', charRange.getEnd());
    }

    @Test
    public void testEdgeCase_MaxValue() {
        charRange = CharRange.is(Character.MAX_VALUE); // Check with max char value
        assertEquals(Character.MAX_VALUE, charRange.getEnd());
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_char_getEnd_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        charRange = CharRange.is('a'); // Using static factory method to instantiate.
    }

    @Test
    public void testTypicalUseCase() {
        assertEquals('a', charRange.getEnd());
    }

    @Test
    public void testEdgeCase_EmptyRange() {
        charRange = CharRange.is('\0'); // Check with zero/null char value
        assertEquals('\0', charRange.getEnd());
    }

    @Test
    public void testEdgeCase_MaxValue() {
        charRange = CharRange.is(Character.MAX_VALUE); // Check with max char value
        assertEquals(Character.MAX_VALUE, charRange.getEnd());
    }
}
","org/apache/commons/lang3/CharRange_char_getEnd_Test.java","","file_not_found"
"org.apache.commons.lang3.CharRange.hashCode()","int hashCode()","{
    org.apache.commons.lang3.CharRange this;
    unknown $stack1, $stack2, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8;


    this := @this: org.apache.commons.lang3.CharRange;
    $stack1 = this.<org.apache.commons.lang3.CharRange: char start>;
    $stack4 = 83 + $stack1;
    $stack2 = this.<org.apache.commons.lang3.CharRange: char end>;
    $stack3 = 7 * $stack2;
    $stack6 = $stack4 + $stack3;
    $stack5 = this.<org.apache.commons.lang3.CharRange: boolean negated>;

    if $stack5 == 0 goto label1;
    $stack8 = 1;

    goto label2;

  label1:
    $stack8 = 0;

  label2:
    $stack7 = $stack6 + $stack8;

    return $stack7;
}
","false","PUBLIC","Override","<p>Gets a hashCode compatible with the equals method.</p>
@return a suitable hashCode","implements java.io.Serializable, java.lang.Iterable","PRIVATE FINAL char start; PRIVATE FINAL boolean negated; PRIVATE TRANSIENT java.lang.String iToString; PRIVATE STATIC FINAL long serialVersionUID; PRIVATE FINAL char end","0","0","","83, 7, 1, 0","private","is(char), isNot(char), isIn(char,char), isNotIn(char,char)","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_int_hashCode_Test {

    private CharRange range1;
    private CharRange range2;
    private CharRange range3;
    private CharRange range4;

    @Before
    public void setUp() {
        range1 = CharRange.is('a');
        range2 = CharRange.isNot('b');
        range3 = CharRange.isIn('c', 'd');
        range4 = CharRange.isNotIn('e', 'f');
    }

    @Test
    public void testHashCode_SameCharRange_ShouldHaveSameHashCode() {
        CharRange otherRange = CharRange.is('a');
        assertEquals(range1.hashCode(), otherRange.hashCode());
    }

    @Test
    public void testHashCode_DifferentCharRanges_ShouldHaveDifferentHashCodes() {
        assertNotEquals(range1.hashCode(), range2.hashCode());
        assertNotEquals(range1.hashCode(), range3.hashCode());
        assertNotEquals(range2.hashCode(), range3.hashCode());
    }

    @Test
    public void testHashCode_SameRangeDifferentNegation_ShouldHaveDifferentHashCodes() {
        CharRange otherRange = CharRange.isNot('a');
        assertNotEquals(range1.hashCode(), otherRange.hashCode());
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharRange_int_hashCode_Test {

    private CharRange range1;
    private CharRange range2;
    private CharRange range3;
    private CharRange range4;

    @Before
    public void setUp() {
        range1 = CharRange.is('a');
        range2 = CharRange.isNot('b');
        range3 = CharRange.isIn('c', 'd');
        range4 = CharRange.isNotIn('e', 'f');
    }

    @Test
    public void testHashCode_SameCharRange_ShouldHaveSameHashCode() {
        CharRange otherRange = CharRange.is('a');
        assertEquals(range1.hashCode(), otherRange.hashCode());
    }

    @Test
    public void testHashCode_DifferentCharRanges_ShouldHaveDifferentHashCodes() {
        assertNotEquals(range1.hashCode(), range2.hashCode());
        assertNotEquals(range1.hashCode(), range3.hashCode());
        assertNotEquals(range2.hashCode(), range3.hashCode());
    }

    @Test
    public void testHashCode_SameRangeDifferentNegation_ShouldHaveDifferentHashCodes() {
        CharRange otherRange = CharRange.isNot('a');
        assertNotEquals(range1.hashCode(), otherRange.hashCode());
    }
}
","org/apache/commons/lang3/CharRange_int_hashCode_Test.java","","file_not_found"
"org.apache.commons.lang3.CharRange.toString()","java.lang.String toString()","{
    org.apache.commons.lang3.CharRange this;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack2, $stack20, $stack21, $stack3, $stack4, $stack5, $stack6, $stack7, $stack8, $stack9, buf;


    this := @this: org.apache.commons.lang3.CharRange;
    $stack2 = this.<org.apache.commons.lang3.CharRange: java.lang.String iToString>;

    if $stack2 != null goto label3;
    $stack4 = new java.lang.StringBuilder;
    specialinvoke $stack4.<java.lang.StringBuilder: void <init>(int)>(4);
    buf = $stack4;
    $stack5 = virtualinvoke this.<org.apache.commons.lang3.CharRange: boolean isNegated()>();

    if $stack5 == 0 goto label1;
    $stack17 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(94);

  label1:
    $stack19 = buf;
    $stack18 = this;
    $stack6 = this.<org.apache.commons.lang3.CharRange: char start>;
    $stack7 = virtualinvoke $stack19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack6);
    $stack20 = this;
    $stack9 = this.<org.apache.commons.lang3.CharRange: char start>;
    $stack21 = this;
    $stack8 = this.<org.apache.commons.lang3.CharRange: char end>;

    if $stack9 == $stack8 goto label2;
    $stack12 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(45);
    $stack13 = this.<org.apache.commons.lang3.CharRange: char end>;
    $stack14 = virtualinvoke buf.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack13);

  label2:
    $stack16 = this;
    $stack15 = buf;
    $stack10 = virtualinvoke $stack15.<java.lang.StringBuilder: java.lang.String toString()>();
    this.<org.apache.commons.lang3.CharRange: java.lang.String iToString> = $stack10;

  label3:
    $stack11 = this;
    $stack3 = this.<org.apache.commons.lang3.CharRange: java.lang.String iToString>;

    return $stack3;
}
","false","PUBLIC","Override","<p>Gets a string representation of the character range.</p>
@return string representation of this range","implements java.io.Serializable, java.lang.Iterable","PRIVATE FINAL char start; PRIVATE FINAL boolean negated; PRIVATE TRANSIENT java.lang.String iToString; PRIVATE STATIC FINAL long serialVersionUID; PRIVATE FINAL char end","0","3","org.apache.commons.lang3.CharRange.isNegated(), java.lang.StringBuilder.append(char), java.lang.StringBuilder.toString()","'^', '-', 4","private","is(char), isNot(char), isIn(char,char), isNotIn(char,char)","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertEquals;

@RunWith(JUnit4.class)
public class CharRange_String_toString_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        charRange = CharRange.is('a');
    }

    @Test
    public void testSingleCharacterRange() {
        CharRange range = CharRange.is('a');
        assertEquals(""a"", range.toString());
    }

    @Test
    public void testRangeOfCharacters() {
        CharRange range = CharRange.isIn('a', 'z');
        assertEquals(""a-z"", range.toString());
    }

    @Test
    public void testNegatedSingleCharacterRange() {
        CharRange range = CharRange.isNot('a');
        assertEquals(""^a"", range.toString());
    }

    @Test
    public void testNegatedRangeOfCharacters() {
        CharRange range = CharRange.isNotIn('a', 'z');
        assertEquals(""^a-z"", range.toString());
    }

    @Test
    public void testCachedStringRepresentation() {
        CharRange range = CharRange.is('a');
        String firstCall = range.toString();
        String secondCall = range.toString();
        assertEquals(firstCall, secondCall);
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertEquals;

@RunWith(JUnit4.class)
public class CharRange_String_toString_Test {

    private CharRange charRange;

    @Before
    public void setUp() {
        charRange = CharRange.is('a');
    }

    @Test
    public void testSingleCharacterRange() {
        CharRange range = CharRange.is('a');
        assertEquals(""a"", range.toString());
    }

    @Test
    public void testRangeOfCharacters() {
        CharRange range = CharRange.isIn('a', 'z');
        assertEquals(""a-z"", range.toString());
    }

    @Test
    public void testNegatedSingleCharacterRange() {
        CharRange range = CharRange.isNot('a');
        assertEquals(""^a"", range.toString());
    }

    @Test
    public void testNegatedRangeOfCharacters() {
        CharRange range = CharRange.isNotIn('a', 'z');
        assertEquals(""^a-z"", range.toString());
    }

    @Test
    public void testCachedStringRepresentation() {
        CharRange range = CharRange.is('a');
        String firstCall = range.toString();
        String secondCall = range.toString();
        assertEquals(firstCall, secondCall);
    }
}
","org/apache/commons/lang3/CharRange_String_toString_Test.java","","file_not_found"
"org.apache.commons.lang3.CharSetUtils.deepEmpty(java.lang.String[])","boolean deepEmpty(java.lang.String[])","{
    java.lang.String[] strings;
    unknown $stack5, $stack6, $stack7, $stack8, l2, l3, l4, s;


    strings := @parameter0: java.lang.String[];

    if strings == null goto label3;
    l4 = strings;
    l3 = lengthof strings;
    l2 = 0;

    goto label2;

  label1:
    l2 = l2 + 1;

  label2:
    $stack7 = l2;
    $stack6 = l3;

    if $stack7 < $stack6 goto label4;

  label3:
    $stack8 = 1;

    return $stack8;

  label4:
    s = l4[l2];
    $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isNotEmpty(java.lang.CharSequence)>(s);

    if $stack5 == 0 goto label1;

    return 0;
}
","false","PRIVATE STATIC","","Determines whether or not all the Strings in an array are 
empty or not.
@param strings String[] whose elements are being checked for emptiness
@return whether or not the String is empty","","","0","2","org.apache.commons.lang3.StringUtils.isNotEmpty(java.lang.CharSequence)","false, true","public","","```java
package org.apache.commons.lang3;

import org.junit.Test;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

@RunWith(JUnit4.class)
public class CharSetUtils_deepEmpty_StringArray_Test {

    // Cannot directly invoke the private static method deepEmpty. Tests are not implemented.

}
```","package org.apache.commons.lang3;

import org.junit.Test;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;

@RunWith(JUnit4.class)
public class CharSetUtils_deepEmpty_StringArray_Test {

    // Cannot directly invoke the private static method deepEmpty. Tests are not implemented.

}
","org/apache/commons/lang3/CharSetUtils_deepEmpty_StringArray_Test.java","","file_not_found"
"org.apache.commons.lang3.CharSetUtils.containsAny(java.lang.String, java.lang.String[])","boolean containsAny(java.lang.String, java.lang.String[])","{
    java.lang.String str;
    java.lang.String[] set;
    unknown $stack10, $stack11, $stack12, $stack13, $stack7, $stack8, $stack9, c, chars, l4, l5, l6;


    str := @parameter0: java.lang.String;
    set := @parameter1: java.lang.String[];
    $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(str);

    if $stack7 != 0 goto label1;
    $stack8 = staticinvoke <org.apache.commons.lang3.CharSetUtils: boolean deepEmpty(java.lang.String[])>(set);

    if $stack8 == 0 goto label2;

  label1:
    $stack13 = 0;

    return $stack13;

  label2:
    chars = staticinvoke <org.apache.commons.lang3.CharSet: org.apache.commons.lang3.CharSet getInstance(java.lang.String[])>(set);
    $stack9 = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
    l6 = $stack9;
    l5 = lengthof $stack9;
    l4 = 0;

    goto label4;

  label3:
    l4 = l4 + 1;

  label4:
    $stack12 = l4;
    $stack11 = l5;

    if $stack12 < $stack11 goto label5;

    return 0;

  label5:
    c = l6[l4];
    $stack10 = virtualinvoke chars.<org.apache.commons.lang3.CharSet: boolean contains(char)>(c);

    if $stack10 == 0 goto label3;

    return 1;
}
","false","PUBLIC STATIC TRANSIENT","","<p>Takes an argument in set-syntax, see evaluateSet,
and identifies whether any of the characters are present in the specified string.</p>

<pre>
CharSetUtils.containsAny(null, *)        = false
CharSetUtils.containsAny("""", *)          = false
CharSetUtils.containsAny(*, null)        = false
CharSetUtils.containsAny(*, """")          = false
CharSetUtils.containsAny(""hello"", ""k-p"") = true
CharSetUtils.containsAny(""hello"", ""a-d"") = false
</pre>
@see CharSet#getInstance(java.lang.String...) for set-syntax.
@param str String to look for characters in, may be null
@param set String[] set of characters to identify, may be null
@return whether or not the characters in the set are in the primary string","","","0","2","org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence), org.apache.commons.lang3.CharSetUtils.deepEmpty(java.lang.String[]), org.apache.commons.lang3.CharSet.getInstance(java.lang.String...), java.lang.String.toCharArray(), org.apache.commons.lang3.CharSet.contains(char)","false, true","public","","```java
package org.apache.commons.lang3;

import org.junit.Test;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

@RunWith(JUnit4.class)
public class CharSetUtils_boolean_containsAny_String_StringArray_Test {

    @Test
    public void testContainsAny_NullString() {
        assertFalse(CharSetUtils.containsAny(null, new String[]{""a"", ""b""}));
    }

    @Test
    public void testContainsAny_EmptyString() {
        assertFalse(CharSetUtils.containsAny("""", new String[]{""a"", ""b""}));
    }

    @Test
    public void testContainsAny_NullSet() {
        assertFalse(CharSetUtils.containsAny(""hello"", null));
    }

    @Test
    public void testContainsAny_EmptySet() {
        assertFalse(CharSetUtils.containsAny(""hello"", new String[]{}));
    }

    @Test
    public void testContainsAny_ValidSetMatch() {
        assertTrue(CharSetUtils.containsAny(""hello"", new String[]{""k-p""}));
    }

    @Test
    public void testContainsAny_ValidSetNoMatch() {
        assertFalse(CharSetUtils.containsAny(""hello"", new String[]{""a-d""}));
    }

    @Test
    public void testContainsAny_AllEmptyInputs() {
        assertFalse(CharSetUtils.containsAny("""", new String[]{""""}));
    }

    @Test
    public void testContainsAny_EmptyElementsInSet() {
        assertTrue(CharSetUtils.containsAny(""hello"", new String[]{"""", ""h""}));
    }

    @Test
    public void testContainsAny_SingleCharacterString() {
        assertTrue(CharSetUtils.containsAny(""h"", new String[]{""h""}));
        assertFalse(CharSetUtils.containsAny(""h"", new String[]{""a""}));
    }

    @Test
    public void testContainsAny_SingleCharacterSet() {
        assertTrue(CharSetUtils.containsAny(""hello"", new String[]{""e""}));
        assertFalse(CharSetUtils.containsAny(""hello"", new String[]{""z""}));
    }

    @Test
    public void testContainsAny_StringWithSpecialCharacters() {
        assertTrue(CharSetUtils.containsAny(""h@llo!"", new String[]{""@"", ""!""}));
    }

    @Test
    public void testContainsAny_SetWithSpecialCharacters() {
        assertTrue(CharSetUtils.containsAny(""greetings"", new String[]{""("", ""e)""}));
    }

    @Test
    public void testContainsAny_StringAndSetWithDuplicates() {
        assertTrue(CharSetUtils.containsAny(""hellohello"", new String[]{""l"", ""o"", ""l""}));
    }
}
```","package org.apache.commons.lang3;

import org.junit.Test;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

@RunWith(JUnit4.class)
public class CharSetUtils_boolean_containsAny_String_StringArray_Test {

    @Test
    public void testContainsAny_NullString() {
        assertFalse(CharSetUtils.containsAny(null, new String[]{""a"", ""b""}));
    }

    @Test
    public void testContainsAny_EmptyString() {
        assertFalse(CharSetUtils.containsAny("""", new String[]{""a"", ""b""}));
    }

    @Test
    public void testContainsAny_NullSet() {
        assertFalse(CharSetUtils.containsAny(""hello"", null));
    }

    @Test
    public void testContainsAny_EmptySet() {
        assertFalse(CharSetUtils.containsAny(""hello"", new String[]{}));
    }

    @Test
    public void testContainsAny_ValidSetMatch() {
        assertTrue(CharSetUtils.containsAny(""hello"", new String[]{""k-p""}));
    }

    @Test
    public void testContainsAny_ValidSetNoMatch() {
        assertFalse(CharSetUtils.containsAny(""hello"", new String[]{""a-d""}));
    }

    @Test
    public void testContainsAny_AllEmptyInputs() {
        assertFalse(CharSetUtils.containsAny("""", new String[]{""""}));
    }

    @Test
    public void testContainsAny_EmptyElementsInSet() {
        assertTrue(CharSetUtils.containsAny(""hello"", new String[]{"""", ""h""}));
    }

    @Test
    public void testContainsAny_SingleCharacterString() {
        assertTrue(CharSetUtils.containsAny(""h"", new String[]{""h""}));
        assertFalse(CharSetUtils.containsAny(""h"", new String[]{""a""}));
    }

    @Test
    public void testContainsAny_SingleCharacterSet() {
        assertTrue(CharSetUtils.containsAny(""hello"", new String[]{""e""}));
        assertFalse(CharSetUtils.containsAny(""hello"", new String[]{""z""}));
    }

    @Test
    public void testContainsAny_StringWithSpecialCharacters() {
        assertTrue(CharSetUtils.containsAny(""h@llo!"", new String[]{""@"", ""!""}));
    }

    @Test
    public void testContainsAny_SetWithSpecialCharacters() {
        assertTrue(CharSetUtils.containsAny(""greetings"", new String[]{""("", ""e)""}));
    }

    @Test
    public void testContainsAny_StringAndSetWithDuplicates() {
        assertTrue(CharSetUtils.containsAny(""hellohello"", new String[]{""l"", ""o"", ""l""}));
    }
}
","org/apache/commons/lang3/CharSetUtils_boolean_containsAny_String_StringArray_Test.java","","file_not_found"
"org.apache.commons.lang3.CharSetUtils.CharSetUtils()","void CharSetUtils()","{
    org.apache.commons.lang3.CharSetUtils this;


    this := @this: org.apache.commons.lang3.CharSetUtils;
    specialinvoke this.<java.lang.Object: void <init>()>();

    return;
}
","true","PUBLIC","","<p>CharSetUtils instances should NOT be constructed in standard programming.
Instead, the class should be used as {@code CharSetUtils.evaluateSet(null);}.</p>

<p>This constructor is public to permit tools that require a JavaBean instance
to operate.</p>","","","0","0","","","public","","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class CharSetUtils_void_CharSetUtils_Test {

    private CharSetUtils charSetUtils;

    @Before
    public void setUp() {
        charSetUtils = new CharSetUtils();
    }

    @Test
    public void testCharSetUtilsConstructor() {
        // Test to confirm the constructor works without exceptions.
        // Since there's no specific functionality to test in the constructor,
        // this will only confirm instantiation.
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class CharSetUtils_void_CharSetUtils_Test {

    private CharSetUtils charSetUtils;

    @Before
    public void setUp() {
        charSetUtils = new CharSetUtils();
    }

    @Test
    public void testCharSetUtilsConstructor() {
        // Test to confirm the constructor works without exceptions.
        // Since there's no specific functionality to test in the constructor,
        // this will only confirm instantiation.
    }
}
","org/apache/commons/lang3/CharSetUtils_void_CharSetUtils_Test.java","","file_not_found"
"org.apache.commons.lang3.CharSetUtils.squeeze(java.lang.String, java.lang.String[])","java.lang.String squeeze(java.lang.String, java.lang.String[])","{
    java.lang.String str;
    java.lang.String[] set;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack9, buffer, ch, chars, chrs, i, lastChar, sz;


    str := @parameter0: java.lang.String;
    set := @parameter1: java.lang.String[];
    $stack9 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(str);

    if $stack9 != 0 goto label1;
    $stack10 = staticinvoke <org.apache.commons.lang3.CharSetUtils: boolean deepEmpty(java.lang.String[])>(set);

    if $stack10 == 0 goto label2;

  label1:
    $stack21 = str;

    return $stack21;

  label2:
    chars = staticinvoke <org.apache.commons.lang3.CharSet: org.apache.commons.lang3.CharSet getInstance(java.lang.String[])>(set);
    $stack11 = new java.lang.StringBuilder;
    $stack12 = virtualinvoke str.<java.lang.String: int length()>();
    specialinvoke $stack11.<java.lang.StringBuilder: void <init>(int)>($stack12);
    buffer = $stack11;
    chrs = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
    sz = lengthof chrs;
    lastChar = 32;
    ch = 32;
    i = 0;

    goto label5;

  label3:
    $stack17 = buffer;
    $stack16 = ch;
    $stack13 = virtualinvoke $stack17.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack16);
    $stack18 = ch;
    lastChar = $stack18;

  label4:
    i = i + 1;

  label5:
    $stack15 = i;
    $stack14 = sz;

    if $stack15 < $stack14 goto label6;
    $stack20 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>();

    return $stack20;

  label6:
    ch = chrs[i];

    if ch != lastChar goto label3;

    if i == 0 goto label3;
    $stack19 = virtualinvoke chars.<org.apache.commons.lang3.CharSet: boolean contains(char)>(ch);

    if $stack19 == 0 goto label3;

    goto label4;
}
","false","PUBLIC STATIC TRANSIENT","","<p>Squeezes any repetitions of a character that is mentioned in the
supplied set.</p>

<pre>
CharSetUtils.squeeze(null, *)        = null
CharSetUtils.squeeze("""", *)          = """"
CharSetUtils.squeeze(*, null)        = *
CharSetUtils.squeeze(*, """")          = *
CharSetUtils.squeeze(""hello"", ""k-p"") = ""helo""
CharSetUtils.squeeze(""hello"", ""a-e"") = ""hello""
</pre>
@see CharSet#getInstance(java.lang.String...) for set-syntax.
@param str the string to squeeze, may be null
@param set the character set to use for manipulation, may be null
@return the modified String, {@code null} if null string input","","","1","2","org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence), org.apache.commons.lang3.CharSetUtils.deepEmpty(java.lang.String[]), org.apache.commons.lang3.CharSet.getInstance(java.lang.String...), java.lang.String.length(), java.lang.String.toCharArray(), org.apache.commons.lang3.CharSet.contains(char), java.lang.StringBuilder.append(char), java.lang.StringBuilder.toString()","' ', 0","public","","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharSetUtils_string_squeeze_String_Test {
    
    @Before
    public void setUp() {
        // Any necessary setup can be done here if needed
    }

    @Test
    public void testSqueezeNullString() {
        String result = CharSetUtils.squeeze(null, new String[]{""a-z""});
        assertNull(result);
    }
    
    @Test
    public void testSqueezeEmptyString() {
        String result = CharSetUtils.squeeze("""", new String[]{""a-z""});
        assertEquals("""", result);
    }

    @Test
    public void testSqueezeNullSet() {
        String result = CharSetUtils.squeeze(""hello"", null);
        assertEquals(""hello"", result);
    }

    @Test
    public void testSqueezeEmptySet() {
        String result = CharSetUtils.squeeze(""hello"", new String[]{""""});
        assertEquals(""hello"", result);
    }

    @Test
    public void testSqueezeTypicalCase() {
        String result = CharSetUtils.squeeze(""hello"", new String[]{""k-p""});
        assertEquals(""helo"", result);
    }

    @Test
    public void testSqueezeNoRepetitions() {
        String result = CharSetUtils.squeeze(""hello"", new String[]{""a-e""});
        assertEquals(""hello"", result);
    }

    @Test
    public void testSqueezeSingleCharacter() {
        String result = CharSetUtils.squeeze(""aaabbb"", new String[]{""a""});
        assertEquals(""abbb"", result);
    }

    @Test
    public void testSqueezeNonMatchingSet() {
        String result = CharSetUtils.squeeze(""abc"", new String[]{""x-z""});
        assertEquals(""abc"", result);
    }

    @Test
    public void testSqueezeAllCharacters() {
        String result = CharSetUtils.squeeze(""aaa"", new String[]{""a""});
        assertEquals(""a"", result);
    }
    
    @Test
    public void testSqueezeBoundaryValues() {
        String result = CharSetUtils.squeeze(String.valueOf(Character.MAX_VALUE), new String[]{String.valueOf(Character.MAX_VALUE)});
        assertEquals(String.valueOf(Character.MAX_VALUE), result);
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharSetUtils_string_squeeze_String_Test {

    @Before
    public void setUp() {
        // Any necessary setup can be done here if needed
    }

    @Test
    public void testSqueezeNullString() {
        String result = CharSetUtils.squeeze(null, new String[]{""a-z""});
        assertNull(result);
    }

    @Test
    public void testSqueezeEmptyString() {
        String result = CharSetUtils.squeeze("""", new String[]{""a-z""});
        assertEquals("""", result);
    }

    @Test
    public void testSqueezeNullSet() {
        String result = CharSetUtils.squeeze(""hello"", null);
        assertEquals(""hello"", result);
    }

    @Test
    public void testSqueezeEmptySet() {
        String result = CharSetUtils.squeeze(""hello"", new String[]{""""});
        assertEquals(""hello"", result);
    }

    @Test
    public void testSqueezeTypicalCase() {
        String result = CharSetUtils.squeeze(""hello"", new String[]{""k-p""});
        assertEquals(""helo"", result);
    }

    @Test
    public void testSqueezeNoRepetitions() {
        String result = CharSetUtils.squeeze(""hello"", new String[]{""a-e""});
        assertEquals(""hello"", result);
    }

    @Test
    public void testSqueezeSingleCharacter() {
        String result = CharSetUtils.squeeze(""aaabbb"", new String[]{""a""});
        assertEquals(""abbb"", result);
    }

    @Test
    public void testSqueezeNonMatchingSet() {
        String result = CharSetUtils.squeeze(""abc"", new String[]{""x-z""});
        assertEquals(""abc"", result);
    }

    @Test
    public void testSqueezeAllCharacters() {
        String result = CharSetUtils.squeeze(""aaa"", new String[]{""a""});
        assertEquals(""a"", result);
    }

    @Test
    public void testSqueezeBoundaryValues() {
        String result = CharSetUtils.squeeze(String.valueOf(Character.MAX_VALUE), new String[]{String.valueOf(Character.MAX_VALUE)});
        assertEquals(String.valueOf(Character.MAX_VALUE), result);
    }
}
","org/apache/commons/lang3/CharSetUtils_string_squeeze_String_Test.java","","file_not_found"
"org.apache.commons.lang3.CharSetUtils.keep(java.lang.String, java.lang.String[])","java.lang.String keep(java.lang.String, java.lang.String[])","{
    java.lang.String str;
    java.lang.String[] set;
    unknown $stack2, $stack3, $stack4, $stack5;


    str := @parameter0: java.lang.String;
    set := @parameter1: java.lang.String[];

    if str != null goto label1;

    return null;

  label1:
    $stack2 = virtualinvoke str.<java.lang.String: boolean isEmpty()>();

    if $stack2 != 0 goto label2;
    $stack3 = staticinvoke <org.apache.commons.lang3.CharSetUtils: boolean deepEmpty(java.lang.String[])>(set);

    if $stack3 == 0 goto label3;

  label2:
    $stack5 = """";

    return $stack5;

  label3:
    $stack4 = staticinvoke <org.apache.commons.lang3.CharSetUtils: java.lang.String modify(java.lang.String,java.lang.String[],boolean)>(str, set, 1);

    return $stack4;
}
","false","PUBLIC STATIC TRANSIENT","","<p>Takes an argument in set-syntax, see evaluateSet,
and keeps any of characters present in the specified string.</p>

<pre>
CharSetUtils.keep(null, *)        = null
CharSetUtils.keep("""", *)          = """"
CharSetUtils.keep(*, null)        = """"
CharSetUtils.keep(*, """")          = """"
CharSetUtils.keep(""hello"", ""hl"")  = ""hll""
CharSetUtils.keep(""hello"", ""le"")  = ""ell""
</pre>
@see CharSet#getInstance(java.lang.String...) for set-syntax.
@param str String to keep characters from, may be null
@param set String[] set of characters to keep, may be null
@return the modified String, {@code null} if null string input
@since 2.0","","","0","2","java.lang.String.isEmpty(), org.apache.commons.lang3.CharSetUtils.deepEmpty(java.lang.String[]), org.apache.commons.lang3.CharSetUtils.modify(java.lang.String, java.lang.String[], boolean)","true","public","","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharSetUtils_String_keep_StringArray_Test {

    @Test
    public void testKeepWithNullString() {
        assertNull(CharSetUtils.keep(null, new String[]{""a"", ""b""}));
    }

    @Test
    public void testKeepWithNullSet() {
        assertEquals("""", CharSetUtils.keep(""hello"", null));
    }

    @Test
    public void testKeepWithEmptyString() {
        assertEquals("""", CharSetUtils.keep("""", new String[]{""a"", ""b""}));
    }

    @Test
    public void testKeepWithEmptySet() {
        assertEquals("""", CharSetUtils.keep(""hello"", new String[]{}));
    }

    @Test
    public void testKeepTypicalUseCase() {
        assertEquals(""hll"", CharSetUtils.keep(""hello"", new String[]{""hl""}));
    }

    @Test
    public void testKeepAnotherTypicalUseCase() {
        assertEquals(""ell"", CharSetUtils.keep(""hello"", new String[]{""le""}));
    }

    @Test
    public void testKeepWithMultipleSets() {
        assertEquals(""he"", CharSetUtils.keep(""hello"", new String[]{""he"", ""xyz""}));
    }

    // Testing edge case with special characters
    @Test
    public void testKeepWithSpecialCharacters() {
        assertEquals(""!@#"", CharSetUtils.keep(""hello!@#"", new String[]{""!@"", ""#""}));
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharSetUtils_String_keep_StringArray_Test {

    @Test
    public void testKeepWithNullString() {
        assertNull(CharSetUtils.keep(null, new String[]{""a"", ""b""}));
    }

    @Test
    public void testKeepWithNullSet() {
        assertEquals("""", CharSetUtils.keep(""hello"", null));
    }

    @Test
    public void testKeepWithEmptyString() {
        assertEquals("""", CharSetUtils.keep("""", new String[]{""a"", ""b""}));
    }

    @Test
    public void testKeepWithEmptySet() {
        assertEquals("""", CharSetUtils.keep(""hello"", new String[]{}));
    }

    @Test
    public void testKeepTypicalUseCase() {
        assertEquals(""hll"", CharSetUtils.keep(""hello"", new String[]{""hl""}));
    }

    @Test
    public void testKeepAnotherTypicalUseCase() {
        assertEquals(""ell"", CharSetUtils.keep(""hello"", new String[]{""le""}));
    }

    @Test
    public void testKeepWithMultipleSets() {
        assertEquals(""he"", CharSetUtils.keep(""hello"", new String[]{""he"", ""xyz""}));
    }

    // Testing edge case with special characters
    @Test
    public void testKeepWithSpecialCharacters() {
        assertEquals(""!@#"", CharSetUtils.keep(""hello!@#"", new String[]{""!@"", ""#""}));
    }
}
","org/apache/commons/lang3/CharSetUtils_String_keep_StringArray_Test.java","","file_not_found"
"org.apache.commons.lang3.CharSetUtils.delete(java.lang.String, java.lang.String[])","java.lang.String delete(java.lang.String, java.lang.String[])","{
    java.lang.String str;
    java.lang.String[] set;
    unknown $stack2, $stack3, $stack4, $stack5;


    str := @parameter0: java.lang.String;
    set := @parameter1: java.lang.String[];
    $stack2 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(str);

    if $stack2 != 0 goto label1;
    $stack3 = staticinvoke <org.apache.commons.lang3.CharSetUtils: boolean deepEmpty(java.lang.String[])>(set);

    if $stack3 == 0 goto label2;

  label1:
    $stack5 = str;

    return $stack5;

  label2:
    $stack4 = staticinvoke <org.apache.commons.lang3.CharSetUtils: java.lang.String modify(java.lang.String,java.lang.String[],boolean)>(str, set, 0);

    return $stack4;
}
","false","PUBLIC STATIC TRANSIENT","","<p>Takes an argument in set-syntax, see evaluateSet,
and deletes any of characters present in the specified string.</p>

<pre>
CharSetUtils.delete(null, *)        = null
CharSetUtils.delete("""", *)          = """"
CharSetUtils.delete(*, null)        = *
CharSetUtils.delete(*, """")          = *
CharSetUtils.delete(""hello"", ""hl"")  = ""eo""
CharSetUtils.delete(""hello"", ""le"")  = ""ho""
</pre>
@see CharSet#getInstance(java.lang.String...) for set-syntax.
@param str String to delete characters from, may be null
@param set String[] set of characters to delete, may be null
@return the modified String, {@code null} if null string input","","","0","1","org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence), org.apache.commons.lang3.CharSetUtils.deepEmpty(java.lang.String[]), org.apache.commons.lang3.CharSetUtils.modify(java.lang.String, java.lang.String[], boolean)","false","public","","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharSetUtils_String_delete_String_Test {

    @Before
    public void setUp() throws Exception {
        // Initialization if needed
    }

    @Test
    public void testDelete_givenNullString_shouldReturnNull() {
        assertNull(CharSetUtils.delete(null, new String[]{""*""}));
    }

    @Test
    public void testDelete_givenEmptyString_shouldReturnEmpty() {
        assertEquals("""", CharSetUtils.delete("""", new String[]{""*""}));
    }

    @Test
    public void testDelete_givenNullSet_shouldReturnOriginal() {
        assertEquals(""hello"", CharSetUtils.delete(""hello"", null));
    }

    @Test
    public void testDelete_givenEmptySet_shouldReturnOriginal() {
        assertEquals(""hello"", CharSetUtils.delete(""hello"", new String[]{""""}));
    }

    @Test
    public void testDelete_givenSpecificSet_shouldDeleteCharacters() {
        assertEquals(""eo"", CharSetUtils.delete(""hello"", new String[]{""hl""}));
        assertEquals(""ho"", CharSetUtils.delete(""hello"", new String[]{""le""}));
    }

    @Test
    public void testDelete_givenNoDeletionNeeded_shouldReturnOriginal() {
        assertEquals(""hello"", CharSetUtils.delete(""hello"", new String[]{""xyz""}));
    }

    @Test
    public void testDelete_givenAllCharactersToDelete_shouldReturnEmpty() {
        assertEquals("""", CharSetUtils.delete(""hello"", new String[]{""h"", ""e"", ""l"", ""o""}));
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class CharSetUtils_String_delete_String_Test {

    @Before
    public void setUp() throws Exception {
        // Initialization if needed
    }

    @Test
    public void testDelete_givenNullString_shouldReturnNull() {
        assertNull(CharSetUtils.delete(null, new String[]{""*""}));
    }

    @Test
    public void testDelete_givenEmptyString_shouldReturnEmpty() {
        assertEquals("""", CharSetUtils.delete("""", new String[]{""*""}));
    }

    @Test
    public void testDelete_givenNullSet_shouldReturnOriginal() {
        assertEquals(""hello"", CharSetUtils.delete(""hello"", null));
    }

    @Test
    public void testDelete_givenEmptySet_shouldReturnOriginal() {
        assertEquals(""hello"", CharSetUtils.delete(""hello"", new String[]{""""}));
    }

    @Test
    public void testDelete_givenSpecificSet_shouldDeleteCharacters() {
        assertEquals(""eo"", CharSetUtils.delete(""hello"", new String[]{""hl""}));
        assertEquals(""ho"", CharSetUtils.delete(""hello"", new String[]{""le""}));
    }

    @Test
    public void testDelete_givenNoDeletionNeeded_shouldReturnOriginal() {
        assertEquals(""hello"", CharSetUtils.delete(""hello"", new String[]{""xyz""}));
    }

    @Test
    public void testDelete_givenAllCharactersToDelete_shouldReturnEmpty() {
        assertEquals("""", CharSetUtils.delete(""hello"", new String[]{""h"", ""e"", ""l"", ""o""}));
    }
}
","org/apache/commons/lang3/CharSetUtils_String_delete_String_Test.java","","file_not_found"
"org.apache.commons.lang3.CharSetUtils.count(java.lang.String, java.lang.String[])","int count(java.lang.String, java.lang.String[])","{
    java.lang.String str;
    java.lang.String[] set;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack8, $stack9, c, chars, count, l5, l6, l7;


    str := @parameter0: java.lang.String;
    set := @parameter1: java.lang.String[];
    $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(str);

    if $stack8 != 0 goto label1;
    $stack9 = staticinvoke <org.apache.commons.lang3.CharSetUtils: boolean deepEmpty(java.lang.String[])>(set);

    if $stack9 == 0 goto label2;

  label1:
    $stack14 = 0;

    return $stack14;

  label2:
    chars = staticinvoke <org.apache.commons.lang3.CharSet: org.apache.commons.lang3.CharSet getInstance(java.lang.String[])>(set);
    count = 0;
    $stack10 = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
    l7 = $stack10;
    l6 = lengthof $stack10;
    l5 = 0;

    goto label5;

  label3:
    c = l7[l5];
    $stack11 = virtualinvoke chars.<org.apache.commons.lang3.CharSet: boolean contains(char)>(c);

    if $stack11 == 0 goto label4;
    count = count + 1;

  label4:
    l5 = l5 + 1;

  label5:
    $stack13 = l5;
    $stack12 = l6;

    if $stack13 < $stack12 goto label3;

    return count;
}
","false","PUBLIC STATIC TRANSIENT","","<p>Takes an argument in set-syntax, see evaluateSet,
and returns the number of characters present in the specified string.</p>

<pre>
CharSetUtils.count(null, *)        = 0
CharSetUtils.count("""", *)          = 0
CharSetUtils.count(*, null)        = 0
CharSetUtils.count(*, """")          = 0
CharSetUtils.count(""hello"", ""k-p"") = 3
CharSetUtils.count(""hello"", ""a-e"") = 1
</pre>
@see CharSet#getInstance(java.lang.String...) for set-syntax.
@param str String to count characters in, may be null
@param set String[] set of characters to count, may be null
@return the character count, zero if null string input","","","0","2","org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence), org.apache.commons.lang3.CharSetUtils.deepEmpty(java.lang.String[]), org.apache.commons.lang3.CharSet.getInstance(java.lang.String...), java.lang.String.toCharArray(), org.apache.commons.lang3.CharSet.contains(char)","0","public","","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertEquals;

@RunWith(JUnit4.class)
public class CharSetUtils_int_count_String_StringArray_Test {

    @Test
    public void testCount_NullString() {
        int result = CharSetUtils.count(null, new String[]{""a""});
        assertEquals(0, result);
    }
    
    @Test
    public void testCount_EmptyString() {
        int result = CharSetUtils.count("""", new String[]{""a""});
        assertEquals(0, result);
    }

    @Test
    public void testCount_StringNullSet() {
        int result = CharSetUtils.count(""hello"", null);
        assertEquals(0, result);
    }
    
    @Test
    public void testCount_StringEmptySet() {
        int result = CharSetUtils.count(""hello"", new String[]{""""});
        assertEquals(0, result);
    }

    @Test
    public void testCount_ExampleTest1() {
        int result = CharSetUtils.count(""hello"", new String[]{""k-p""});
        assertEquals(3, result);
    }
    
    @Test
    public void testCount_ExampleTest2() {
        int result = CharSetUtils.count(""hello"", new String[]{""a-e""});
        assertEquals(1, result);
    }
    
    @Test
    public void testCount_NoMatch() {
        int result = CharSetUtils.count(""abc"", new String[]{""x-z""});
        assertEquals(0, result);
    }

    @Test
    public void testCount_AllMatch() {
        int result = CharSetUtils.count(""abc"", new String[]{""a-c""});
        assertEquals(3, result);
    }

    @Test
    public void testCount_EmptySetArray() {
        int result = CharSetUtils.count(""hello"", new String[0]);
        assertEquals(0, result);
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertEquals;

@RunWith(JUnit4.class)
public class CharSetUtils_int_count_String_StringArray_Test {

    @Test
    public void testCount_NullString() {
        int result = CharSetUtils.count(null, new String[]{""a""});
        assertEquals(0, result);
    }

    @Test
    public void testCount_EmptyString() {
        int result = CharSetUtils.count("""", new String[]{""a""});
        assertEquals(0, result);
    }

    @Test
    public void testCount_StringNullSet() {
        int result = CharSetUtils.count(""hello"", null);
        assertEquals(0, result);
    }

    @Test
    public void testCount_StringEmptySet() {
        int result = CharSetUtils.count(""hello"", new String[]{""""});
        assertEquals(0, result);
    }

    @Test
    public void testCount_ExampleTest1() {
        int result = CharSetUtils.count(""hello"", new String[]{""k-p""});
        assertEquals(3, result);
    }

    @Test
    public void testCount_ExampleTest2() {
        int result = CharSetUtils.count(""hello"", new String[]{""a-e""});
        assertEquals(1, result);
    }

    @Test
    public void testCount_NoMatch() {
        int result = CharSetUtils.count(""abc"", new String[]{""x-z""});
        assertEquals(0, result);
    }

    @Test
    public void testCount_AllMatch() {
        int result = CharSetUtils.count(""abc"", new String[]{""a-c""});
        assertEquals(3, result);
    }

    @Test
    public void testCount_EmptySetArray() {
        int result = CharSetUtils.count(""hello"", new String[0]);
        assertEquals(0, result);
    }
}
","org/apache/commons/lang3/CharSetUtils_int_count_String_StringArray_Test.java","","file_not_found"
"org.apache.commons.lang3.CharSetUtils.modify(java.lang.String, java.lang.String[], boolean)","java.lang.String modify(java.lang.String, java.lang.String[], boolean)","{
    boolean expect;
    java.lang.String str;
    java.lang.String[] set;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack8, $stack9, buffer, chars, chrs, i, sz;


    str := @parameter0: java.lang.String;
    set := @parameter1: java.lang.String[];
    expect := @parameter2: boolean;
    chars = staticinvoke <org.apache.commons.lang3.CharSet: org.apache.commons.lang3.CharSet getInstance(java.lang.String[])>(set);
    $stack8 = new java.lang.StringBuilder;
    $stack9 = virtualinvoke str.<java.lang.String: int length()>();
    specialinvoke $stack8.<java.lang.StringBuilder: void <init>(int)>($stack9);
    buffer = $stack8;
    chrs = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
    sz = lengthof chrs;
    i = 0;

    goto label3;

  label1:
    $stack10 = chrs[i];
    $stack11 = virtualinvoke chars.<org.apache.commons.lang3.CharSet: boolean contains(char)>($stack10);

    if $stack11 != expect goto label2;
    $stack14 = chrs[i];
    $stack15 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($stack14);

  label2:
    i = i + 1;

  label3:
    $stack13 = i;
    $stack12 = sz;

    if $stack13 < $stack12 goto label1;
    $stack16 = virtualinvoke buffer.<java.lang.StringBuilder: java.lang.String toString()>();

    return $stack16;
}
","false","PRIVATE STATIC","","Implementation of delete and keep
@param str String to modify characters within
@param set String[] set of characters to modify
@param expect whether to evaluate on match, or non-match
@return the modified String, not null","","","1","1","org.apache.commons.lang3.CharSet.getInstance(java.lang.String...), java.lang.String.length(), java.lang.String.toCharArray(), org.apache.commons.lang3.CharSet.contains(char), java.lang.StringBuilder.append(char), java.lang.StringBuilder.toString()","0","public","","```java
package org.apache.commons.lang3;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class CharSetUtils_String_modify_StringArray_boolean_Test {

    // Cannot directly test the private static method CharSetUtils.modify
    // because there are no public factory methods or access points.
    // This comment is placed here as per the rule for private static methods.
    
}
```","package org.apache.commons.lang3;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class CharSetUtils_String_modify_StringArray_boolean_Test {

    // Cannot directly test the private static method CharSetUtils.modify
    // because there are no public factory methods or access points.
    // This comment is placed here as per the rule for private static methods.

}
","org/apache/commons/lang3/CharSetUtils_String_modify_StringArray_boolean_Test.java","","file_not_found"
"org.apache.commons.lang3.text.translate.CodePointTranslator.translate(java.lang.CharSequence, int, java.io.Writer)","int translate(java.lang.CharSequence, int, java.io.Writer)","{
    int index;
    java.io.Writer out;
    java.lang.CharSequence input;
    org.apache.commons.lang3.text.translate.CodePointTranslator this;
    unknown codepoint, consumed;


    this := @this: org.apache.commons.lang3.text.translate.CodePointTranslator;
    input := @parameter0: java.lang.CharSequence;
    index := @parameter1: int;
    out := @parameter2: java.io.Writer;
    codepoint = staticinvoke <java.lang.Character: int codePointAt(java.lang.CharSequence,int)>(input, index);
    consumed = virtualinvoke this.<org.apache.commons.lang3.text.translate.CodePointTranslator: boolean translate(int,java.io.Writer)>(codepoint, out);

    if consumed == 0 goto label1;

    return 1;

  label1:
    return 0;
}
","false","PUBLIC FINAL","Override","Implementation of translate that maps onto the abstract translate(int, Writer) method. 
{@inheritDoc}","org.apache.commons.lang3.text.translate.CharSequenceTranslator","","0","1","java.lang.Character.codePointAt(java.lang.CharSequence, int), org.apache.commons.lang3.text.translate.CodePointTranslator.translate(int, java.io.Writer)","1, 0","public","","```java
package org.apache.commons.lang3;

import org.apache.commons.lang3.text.translate.CodePointTranslator;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.io.StringWriter;
import java.io.Writer;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

@RunWith(JUnit4.class)
public class CodePointTranslator_int_translate_CharSequence_int_Writer_Test {

    private CodePointTranslator translator;

    @Before
    public void setUp() {
        translator = new CodePointTranslator() {
            @Override
            public boolean translate(int codepoint, Writer out) {
                return false; // Stub implementation for testing
            }
        };
    }

    @Test
    public void testTranslateTypicalUseCase() {
        try {
            String input = ""abc"";
            int index = 0;
            StringWriter writer = new StringWriter();

            int result = translator.translate(input, index, writer);

            assertEquals(1, result); // Assuming consumed by default behavior
        } catch (Exception e) {
            fail(""Exception should not be thrown"");
        }
    }

    @Test
    public void testTranslateEmptyInput() {
        try {
            String input = """";
            int index = 0;
            StringWriter writer = new StringWriter();

            int result = translator.translate(input, index, writer);

            assertEquals(0, result);
        } catch (Exception e) {
            fail(""Exception should not be thrown"");
        }
    }

    @Test
    public void testTranslateEndIndex() {
        try {
            String input = ""a"";
            int index = 1;
            StringWriter writer = new StringWriter();

            int result = translator.translate(input, index, writer);

            assertEquals(0, result);
        } catch (Exception e) {
            fail(""Exception should not be thrown"");
        }
    }

    @Test
    public void testTranslateThrowsExceptionOnNullInput() {
        try {
            translator.translate(null, 0, new StringWriter());
            fail(""Exception should have been thrown"");
        } catch (Exception e) {
            // Expected exception
        }
    }

    @Test
    public void testTranslateThrowsExceptionOnNullWriter() {
        try {
            translator.translate(""abc"", 0, null);
            fail(""Exception should have been thrown"");
        } catch (Exception e) {
            // Expected exception
        }
    }
}
```","package org.apache.commons.lang3;

import org.apache.commons.lang3.text.translate.CodePointTranslator;
import org.apache.commons.lang3.text.translate.CharSequenceTranslator;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import java.io.StringWriter;
import java.io.Writer;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

@RunWith(JUnit4.class)
public class CodePointTranslator_int_translate_CharSequence_int_Writer_Test {

    private CodePointTranslator translator;

    @Before
    public void setUp() {
        translator = new CodePointTranslator() {
            @Override
            public boolean translate(int codepoint, Writer out) {
                return false; // Stub implementation for testing
            }
        };
    }

    @Test
    public void testTranslateTypicalUseCase() {
        try {
            String input = ""abc"";
            int index = 0;
            StringWriter writer = new StringWriter();

            int result = translator.translate(input, index, writer);

            assertEquals(1, result); // Assuming consumed by default behavior
        } catch (Exception e) {
            fail(""Exception should not be thrown"");
        }
    }

    @Test
    public void testTranslateEmptyInput() {
        try {
            String input = """";
            int index = 0;
            StringWriter writer = new StringWriter();

            int result = translator.translate(input, index, writer);

            assertEquals(0, result);
        } catch (Exception e) {
            fail(""Exception should not be thrown"");
        }
    }

    @Test
    public void testTranslateEndIndex() {
        try {
            String input = ""a"";
            int index = 1;
            StringWriter writer = new StringWriter();

            int result = translator.translate(input, index, writer);

            assertEquals(0, result);
        } catch (Exception e) {
            fail(""Exception should not be thrown"");
        }
    }

    @Test
    public void testTranslateThrowsExceptionOnNullInput() {
        try {
            translator.translate(null, 0, new StringWriter());
            fail(""Exception should have been thrown"");
        } catch (Exception e) {
            // Expected exception
        }
    }

    @Test
    public void testTranslateThrowsExceptionOnNullWriter() {
        try {
            translator.translate(""abc"", 0, null);
            fail(""Exception should have been thrown"");
        } catch (Exception e) {
            // Expected exception
        }
    }
}
","org/apache/commons/lang3/CodePointTranslator_int_translate_CharSequence_int_Writer_Test.java","","file_not_found"
"org.apache.commons.lang3.text.WordUtils.WordUtils()","void WordUtils()","{
    org.apache.commons.lang3.text.WordUtils this;


    this := @this: org.apache.commons.lang3.text.WordUtils;
    specialinvoke this.<java.lang.Object: void <init>()>();

    return;
}
","true","PUBLIC","","<p><code>WordUtils</code> instances should NOT be constructed in
standard programming. Instead, the class should be used as
<code>WordUtils.wrap(""foo bar"", 20);</code>.</p>

<p>This constructor is public to permit tools that require a JavaBean
instance to operate.</p>","","","0","0","","","public","","```java
package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class WordUtils_void_Test {

    // Cannot instantiate WordUtils directly since it has no functional public constructor methods.
    // It's intended to be used statically, without creating an instance.
}
```","package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

@RunWith(JUnit4.class)
public class WordUtils_void_Test {

    // Cannot instantiate WordUtils directly since it has no functional public constructor methods.
    // It's intended to be used statically, without creating an instance.
}
","org/apache/commons/lang3/WordUtils_void_Test.java","","file_not_found"
"org.apache.commons.lang3.text.WordUtils.capitalizeFully(java.lang.String)","java.lang.String capitalizeFully(java.lang.String)","{
    java.lang.String str;
    unknown $stack1;


    str := @parameter0: java.lang.String;
    $stack1 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String capitalizeFully(java.lang.String,char[])>(str, null);

    return $stack1;
}
","false","PUBLIC STATIC","","<p>Converts all the whitespace separated words in a String into capitalized words, 
that is each word is made up of a titlecase character and then a series of 
lowercase characters.  </p>

<p>Whitespace is defined by {@link Character#isWhitespace(char)}.
A <code>null</code> input String returns <code>null</code>.
Capitalization uses the Unicode title case, normally equivalent to
upper case.</p>

<pre>
WordUtils.capitalizeFully(null)        = null
WordUtils.capitalizeFully("""")          = """"
WordUtils.capitalizeFully(""i am FINE"") = ""I Am Fine""
</pre>
@param str the String to capitalize, may be null
@return capitalized String, <code>null</code> if null String input","","","0","0","","","public","","```java
package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_String_capitalizeFully_String_Test {

    @Test
    public void testCapitalizeFully_NullInput() {
        assertNull(WordUtils.capitalizeFully(null));
    }

    @Test
    public void testCapitalizeFully_EmptyString() {
        assertEquals("""", WordUtils.capitalizeFully(""""));
    }

    @Test
    public void testCapitalizeFully_SingleWord() {
        assertEquals(""Fine"", WordUtils.capitalizeFully(""fine""));
    }

    @Test
    public void testCapitalizeFully_MultipleWords() {
        assertEquals(""I Am Fine"", WordUtils.capitalizeFully(""i am FINE""));
    }

    @Test
    public void testCapitalizeFully_SingleLetterWords() {
        assertEquals(""A B C"", WordUtils.capitalizeFully(""a b c""));
    }

    @Test
    public void testCapitalizeFully_WithSpaces() {
        assertEquals(""  I Am Fine  "", WordUtils.capitalizeFully(""  i am FINE  ""));
    }

    @Test
    public void testCapitalizeFully_AlreadyCapitalized() {
        assertEquals(""I Am Fine"", WordUtils.capitalizeFully(""I Am Fine""));
    }

    @Test
    public void testCapitalizeFully_WordWithNumbers() {
        assertEquals(""Test 123"", WordUtils.capitalizeFully(""test 123""));
    }

    @Test
    public void testCapitalizeFully_NonAlphabeticCharacters() {
        assertEquals(""Hello-World"", WordUtils.capitalizeFully(""hello-world""));
    }
}
```","package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_String_capitalizeFully_String_Test {

    @Test
    public void testCapitalizeFully_NullInput() {
        assertNull(WordUtils.capitalizeFully(null));
    }

    @Test
    public void testCapitalizeFully_EmptyString() {
        assertEquals("""", WordUtils.capitalizeFully(""""));
    }

    @Test
    public void testCapitalizeFully_SingleWord() {
        assertEquals(""Fine"", WordUtils.capitalizeFully(""fine""));
    }

    @Test
    public void testCapitalizeFully_MultipleWords() {
        assertEquals(""I Am Fine"", WordUtils.capitalizeFully(""i am FINE""));
    }

    @Test
    public void testCapitalizeFully_SingleLetterWords() {
        assertEquals(""A B C"", WordUtils.capitalizeFully(""a b c""));
    }

    @Test
    public void testCapitalizeFully_WithSpaces() {
        assertEquals(""  I Am Fine  "", WordUtils.capitalizeFully(""  i am FINE  ""));
    }

    @Test
    public void testCapitalizeFully_AlreadyCapitalized() {
        assertEquals(""I Am Fine"", WordUtils.capitalizeFully(""I Am Fine""));
    }

    @Test
    public void testCapitalizeFully_WordWithNumbers() {
        assertEquals(""Test 123"", WordUtils.capitalizeFully(""test 123""));
    }

    @Test
    public void testCapitalizeFully_NonAlphabeticCharacters() {
        assertEquals(""Hello-World"", WordUtils.capitalizeFully(""hello-world""));
    }
}
","org/apache/commons/lang3/WordUtils_String_capitalizeFully_String_Test.java","","file_not_found"
"org.apache.commons.lang3.text.WordUtils.initials(java.lang.String, char[])","java.lang.String initials(java.lang.String, char[])","{
    char[] delimiters;
    java.lang.String str;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack8, $stack9, buf, ch, count, i, lastWasGap, strLen;


    str := @parameter0: java.lang.String;
    delimiters := @parameter1: char[];
    $stack8 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(str);

    if $stack8 == 0 goto label1;

    return str;

  label1:
    if delimiters == null goto label2;
    $stack16 = lengthof delimiters;

    if $stack16 != 0 goto label2;

    return """";

  label2:
    $stack17 = str;
    $stack18 = virtualinvoke str.<java.lang.String: int length()>();
    $stack20 = strLen;
    $stack19 = 2;
    $stack9 = $stack20 / $stack19;
    $stack21 = 1;
    $stack10 = $stack9 + $stack21;
    $stack22 = newarray (char)[$stack10];
    $stack23 = 0;
    count = $stack23;
    $stack24 = 1;
    lastWasGap = $stack24;
    $stack25 = 0;
    i = $stack25;

    goto label5;

  label3:
    if lastWasGap == 0 goto label4;
    $stack14 = count;
    count = count + 1;
    buf[$stack14] = ch;
    lastWasGap = 0;

  label4:
    i = i + 1;

  label5:
    $stack13 = i;
    $stack12 = strLen;

    if $stack13 < $stack12 goto label6;
    $stack15 = new java.lang.String;
    specialinvoke $stack15.<java.lang.String: void <init>(char[],int,int)>(buf, 0, count);

    return $stack15;

  label6:
    ch = virtualinvoke str.<java.lang.String: char charAt(int)>(i);
    $stack11 = staticinvoke <org.apache.commons.lang3.text.WordUtils: boolean isDelimiter(char,char[])>(ch, delimiters);

    if $stack11 == 0 goto label3;
    lastWasGap = 1;

    goto label4;
}
","false","PUBLIC STATIC TRANSIENT","","<p>Extracts the initial letters from each word in the String.</p>

<p>The first letter of the string and all first letters after the
defined delimiters are returned as a new string.
Their case is not changed.</p>

<p>If the delimiters array is null, then Whitespace is used.
Whitespace is defined by {@link Character#isWhitespace(char)}.
A <code>null</code> input String returns <code>null</code>.
An empty delimiter array returns an empty String.</p>

<pre>
WordUtils.initials(null, *)                = null
WordUtils.initials("""", *)                  = """"
WordUtils.initials(""Ben John Lee"", null)   = ""BJL""
WordUtils.initials(""Ben J.Lee"", null)      = ""BJ""
WordUtils.initials(""Ben J.Lee"", [' ','.']) = ""BJL""
WordUtils.initials(*, new char[0])         = """"
</pre>
@param str the String to get initials from, may be null
@param delimiters set of characters to determine words, null means whitespace
@return String of initial letters, <code>null</code> if null String input
@see #initials(String)
@since 2.2","","","1","4","org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence), java.lang.String.length(), java.lang.String.charAt(int), org.apache.commons.lang3.text.WordUtils.isDelimiter(char, char[])",""""", 0, 2, 1, true, false","public","","```java
package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_String_initials_String_charArray_Test {

    @Test
    public void testNullString() {
        assertNull(WordUtils.initials(null, new char[]{' '}));
    }

    @Test
    public void testEmptyString() {
        assertEquals("""", WordUtils.initials("""", new char[]{' '}));
    }

    @Test
    public void testNullDelimiters() {
        assertEquals(""BJL"", WordUtils.initials(""Ben John Lee"", null));
    }

    @Test
    public void testEmptyDelimiters() {
        assertEquals("""", WordUtils.initials(""Ben John Lee"", new char[0]));
    }

    @Test
    public void testWhitespaceDelimiters() {
        assertEquals(""BJ"", WordUtils.initials(""Ben J.Lee"", null));
    }

    @Test
    public void testDotAndSpaceDelimiters() {
        assertEquals(""BJL"", WordUtils.initials(""Ben J.Lee"", new char[]{' ', '.'}));
    }

    @Test
    public void testSingleCharacterString() {
        assertEquals(""B"", WordUtils.initials(""B"", new char[]{' '}));
    }

    @Test
    public void testStringWithoutDelimiters() {
        assertEquals(""B"", WordUtils.initials(""Ben"", new char[]{' '}));
    }

    @Test
    public void testStringWithMultipleConsecutiveDelimiters() {
        assertEquals(""BJL"", WordUtils.initials(""Ben  J.  Lee"", new char[]{' ', '.'}));
    }

    @Test
    public void testNonAlphaCharacters() {
        assertEquals(""B1L"", WordUtils.initials(""Ben1 J@. Lee#2"", new char[]{' ', '.', '@', '#', '1', '2'}));
    }

    @Test
    public void testStringWithNonAlphabetsOnly() {
        assertEquals("""", WordUtils.initials(""!!!"", new char[]{'!'}));
    }
}
```","package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_String_initials_String_charArray_Test {

    @Test
    public void testNullString() {
        assertNull(WordUtils.initials(null, new char[]{' '}));
    }

    @Test
    public void testEmptyString() {
        assertEquals("""", WordUtils.initials("""", new char[]{' '}));
    }

    @Test
    public void testNullDelimiters() {
        assertEquals(""BJL"", WordUtils.initials(""Ben John Lee"", null));
    }

    @Test
    public void testEmptyDelimiters() {
        assertEquals("""", WordUtils.initials(""Ben John Lee"", new char[0]));
    }

    @Test
    public void testWhitespaceDelimiters() {
        assertEquals(""BJ"", WordUtils.initials(""Ben J.Lee"", null));
    }

    @Test
    public void testDotAndSpaceDelimiters() {
        assertEquals(""BJL"", WordUtils.initials(""Ben J.Lee"", new char[]{' ', '.'}));
    }

    @Test
    public void testSingleCharacterString() {
        assertEquals(""B"", WordUtils.initials(""B"", new char[]{' '}));
    }

    @Test
    public void testStringWithoutDelimiters() {
        assertEquals(""B"", WordUtils.initials(""Ben"", new char[]{' '}));
    }

    @Test
    public void testStringWithMultipleConsecutiveDelimiters() {
        assertEquals(""BJL"", WordUtils.initials(""Ben  J.  Lee"", new char[]{' ', '.'}));
    }

    @Test
    public void testNonAlphaCharacters() {
        assertEquals(""B1L"", WordUtils.initials(""Ben1 J@. Lee#2"", new char[]{' ', '.', '@', '#', '1', '2'}));
    }

    @Test
    public void testStringWithNonAlphabetsOnly() {
        assertEquals("""", WordUtils.initials(""!!!"", new char[]{'!'}));
    }
}
","org/apache/commons/lang3/WordUtils_String_initials_String_charArray_Test.java","","file_not_found"
"org.apache.commons.lang3.text.WordUtils.wrap(java.lang.String, int, java.lang.String, boolean)","java.lang.String wrap(java.lang.String, int, java.lang.String, boolean)","{
    boolean wrapLongWords;
    int wrapLength;
    java.lang.String newLineStr, str;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack17, $stack18, $stack19, $stack20, $stack21, $stack22, $stack23, $stack24, $stack25, $stack26, $stack27, $stack28, $stack29, $stack30, $stack31, $stack32, $stack33, $stack34, $stack35, $stack36, $stack37, $stack38, $stack8, $stack9, inputLineLength, offset, spaceToWrapAt, wrappedLine;


    str := @parameter0: java.lang.String;
    wrapLength := @parameter1: int;
    newLineStr := @parameter2: java.lang.String;
    wrapLongWords := @parameter3: boolean;

    if str != null goto label1;

    return null;

  label1:
    if newLineStr != null goto label2;
    newLineStr = <org.apache.commons.lang3.SystemUtils: java.lang.String LINE_SEPARATOR>;

  label2:
    $stack38 = wrapLength;
    $stack37 = 1;

    if $stack38 >= $stack37 goto label3;
    wrapLength = 1;

  label3:
    $stack32 = str;
    $stack33 = virtualinvoke str.<java.lang.String: int length()>();
    $stack34 = 0;
    offset = $stack34;
    $stack8 = new java.lang.StringBuilder;
    $stack36 = inputLineLength;
    $stack35 = 32;
    $stack9 = $stack36 + $stack35;
    specialinvoke $stack8.<java.lang.StringBuilder: void <init>(int)>($stack9);
    wrappedLine = $stack8;

    goto label5;

  label4:
    $stack14 = virtualinvoke str.<java.lang.String: java.lang.String substring(int)>(offset);
    $stack15 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack14);
    offset = inputLineLength;

  label5:
    $stack17 = inputLineLength;
    $stack16 = offset;
    $stack10 = $stack17 - $stack16;
    $stack18 = wrapLength;

    if $stack10 > $stack18 goto label6;
    $stack29 = virtualinvoke str.<java.lang.String: java.lang.String substring(int)>(offset);
    $stack30 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack29);
    $stack31 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.String toString()>();

    return $stack31;

  label6:
    $stack11 = virtualinvoke str.<java.lang.String: char charAt(int)>(offset);

    if $stack11 != 32 goto label7;
    offset = offset + 1;

    goto label5;

  label7:
    $stack12 = wrapLength + offset;
    spaceToWrapAt = virtualinvoke str.<java.lang.String: int lastIndexOf(int,int)>(32, $stack12);

    if spaceToWrapAt < offset goto label8;
    $stack26 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(offset, spaceToWrapAt);
    $stack27 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack26);
    $stack28 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(newLineStr);
    offset = spaceToWrapAt + 1;

    goto label5;

  label8:
    if wrapLongWords == 0 goto label9;
    $stack22 = wrapLength + offset;
    $stack23 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(offset, $stack22);
    $stack24 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack23);
    $stack25 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(newLineStr);
    offset = offset + wrapLength;

    goto label5;

  label9:
    $stack13 = wrapLength + offset;
    spaceToWrapAt = virtualinvoke str.<java.lang.String: int indexOf(int,int)>(32, $stack13);

    if spaceToWrapAt < 0 goto label4;
    $stack19 = virtualinvoke str.<java.lang.String: java.lang.String substring(int,int)>(offset, spaceToWrapAt);
    $stack20 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($stack19);
    $stack21 = virtualinvoke wrappedLine.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(newLineStr);
    offset = spaceToWrapAt + 1;

    goto label5;
}
","false","PUBLIC STATIC","","<p>Wraps a single line of text, identifying words by <code>' '</code>.</p>

<p>Leading spaces on a new line are stripped.
Trailing spaces are not stripped.</p>

<pre>
WordUtils.wrap(null, *, *, *) = null
WordUtils.wrap("""", *, *, *) = """"
</pre>
@param str the String to be word wrapped, may be null
@param wrapLength the column to wrap the words at, less than 1 is treated as 1
@param newLineStr the string to insert for a new line, 
 <code>null</code> uses the system property line separator
@param wrapLongWords true if long words (such as URLs) should be wrapped
@return a line with newlines inserted, <code>null</code> if null input","","","1","7","java.lang.String.length(), java.lang.String.charAt(int), java.lang.String.lastIndexOf(int, int), java.lang.StringBuilder.append(java.lang.String), java.lang.String.substring(int, int), java.lang.String.indexOf(int, int), java.lang.String.substring(int), java.lang.StringBuilder.toString()","' ', 1, 0, 32","public","","```java
package org.apache.commons.lang3;

import org.junit.Test;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_wrap_String_int_String_boolean_Test {

    @Test
    public void testWrap_NullString() {
        String result = WordUtils.wrap(null, 10, ""\n"", false);
        assertNull(result);
    }

    @Test
    public void testWrap_EmptyString() {
        String result = WordUtils.wrap("""", 10, ""\n"", false);
        assertEquals("""", result);
    }

    @Test
    public void testWrap_SingleWord_NotWrapped() {
        String result = WordUtils.wrap(""hello"", 10, ""\n"", false);
        assertEquals(""hello"", result);
    }

    @Test
    public void testWrap_SingleWord_WrappedLongWords() {
        String result = WordUtils.wrap(""hello"", 3, ""\n"", true);
        assertEquals(""hel\nlo"", result);
    }

    @Test
    public void testWrap_MultipleWords_NormalWrap() {
        String result = WordUtils.wrap(""hello world"", 5, ""\n"", false);
        assertEquals(""hello\nworld"", result);
    }

    @Test
    public void testWrap_NoSpace_WrapLongWords() {
        String result = WordUtils.wrap(""helloworld"", 5, ""\n"", true);
        assertEquals(""hello\nworld"", result);
    }

    @Test
    public void testWrap_MultipleSpaces() {
        String result = WordUtils.wrap(""hello   world"", 5, ""\n"", false);
        assertEquals(""hello\nworld"", result);
    }

    @Test
    public void testWrap_VaryingLineLength() {
        String result = WordUtils.wrap(""a long line of text gets wrapped"", 7, ""\n"", false);
        assertEquals(""a long\nline of\ntext\ngets\nwrapped"", result);
    }

    @Test
    public void testWrap_CustomNewLine() {
        String result = WordUtils.wrap(""hello world"", 5, ""<br>"", false);
        assertEquals(""hello<br>world"", result);
    }

    @Test
    public void testWrap_WrapLengthLessThanOne() {
        String result = WordUtils.wrap(""hello world"", 0, ""\n"", false);
        assertEquals(""h\ne\nl\nl\no\n \nw\no\nr\nl\nd"", result);
    }

    @Test
    public void testWrap_WrapLongWordsFalse() {
        String result = WordUtils.wrap(""helloworld"", 5, ""\n"", false);
        assertEquals(""helloworld"", result);
    }
}
```","package org.apache.commons.lang3;

import org.junit.Test;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_wrap_String_int_String_boolean_Test {

    @Test
    public void testWrap_NullString() {
        String result = WordUtils.wrap(null, 10, ""\n"", false);
        assertNull(result);
    }

    @Test
    public void testWrap_EmptyString() {
        String result = WordUtils.wrap("""", 10, ""\n"", false);
        assertEquals("""", result);
    }

    @Test
    public void testWrap_SingleWord_NotWrapped() {
        String result = WordUtils.wrap(""hello"", 10, ""\n"", false);
        assertEquals(""hello"", result);
    }

    @Test
    public void testWrap_SingleWord_WrappedLongWords() {
        String result = WordUtils.wrap(""hello"", 3, ""\n"", true);
        assertEquals(""hel\nlo"", result);
    }

    @Test
    public void testWrap_MultipleWords_NormalWrap() {
        String result = WordUtils.wrap(""hello world"", 5, ""\n"", false);
        assertEquals(""hello\nworld"", result);
    }

    @Test
    public void testWrap_NoSpace_WrapLongWords() {
        String result = WordUtils.wrap(""helloworld"", 5, ""\n"", true);
        assertEquals(""hello\nworld"", result);
    }

    @Test
    public void testWrap_MultipleSpaces() {
        String result = WordUtils.wrap(""hello   world"", 5, ""\n"", false);
        assertEquals(""hello\nworld"", result);
    }

    @Test
    public void testWrap_VaryingLineLength() {
        String result = WordUtils.wrap(""a long line of text gets wrapped"", 7, ""\n"", false);
        assertEquals(""a long\nline of\ntext\ngets\nwrapped"", result);
    }

    @Test
    public void testWrap_CustomNewLine() {
        String result = WordUtils.wrap(""hello world"", 5, ""<br>"", false);
        assertEquals(""hello<br>world"", result);
    }

    @Test
    public void testWrap_WrapLengthLessThanOne() {
        String result = WordUtils.wrap(""hello world"", 0, ""\n"", false);
        assertEquals(""h\ne\nl\nl\no\n \nw\no\nr\nl\nd"", result);
    }

    @Test
    public void testWrap_WrapLongWordsFalse() {
        String result = WordUtils.wrap(""helloworld"", 5, ""\n"", false);
        assertEquals(""helloworld"", result);
    }
}
","org/apache/commons/lang3/WordUtils_wrap_String_int_String_boolean_Test.java","","file_not_found"
"org.apache.commons.lang3.text.WordUtils.capitalize(java.lang.String)","java.lang.String capitalize(java.lang.String)","{
    java.lang.String str;
    unknown $stack1;


    str := @parameter0: java.lang.String;
    $stack1 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String capitalize(java.lang.String,char[])>(str, null);

    return $stack1;
}
","false","PUBLIC STATIC","","<p>Capitalizes all the whitespace separated words in a String.
Only the first letter of each word is changed. To convert the 
rest of each word to lowercase at the same time, 
use {@link #capitalizeFully(String)}.</p>

<p>Whitespace is defined by {@link Character#isWhitespace(char)}.
A <code>null</code> input String returns <code>null</code>.
Capitalization uses the Unicode title case, normally equivalent to
upper case.</p>

<pre>
WordUtils.capitalize(null)        = null
WordUtils.capitalize("""")          = """"
WordUtils.capitalize(""i am FINE"") = ""I Am FINE""
</pre>
@param str the String to capitalize, may be null
@return capitalized String, <code>null</code> if null String input
@see #uncapitalize(String)
@see #capitalizeFully(String)","","","0","0","","","public","","```java
package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_String_capitalize_String_Test {

    @Test
    public void testCapitalize_NullString() {
        assertNull(WordUtils.capitalize(null));
    }

    @Test
    public void testCapitalize_EmptyString() {
        assertEquals("""", WordUtils.capitalize(""""));
    }

    @Test
    public void testCapitalize_SingleWord() {
        assertEquals(""Hello"", WordUtils.capitalize(""hello""));
    }

    @Test
    public void testCapitalize_MultipleWords() {
        assertEquals(""I Am FINE"", WordUtils.capitalize(""i am FINE""));
    }

    @Test
    public void testCapitalize_SingleLowercaseLetters() {
        assertEquals(""A B C"", WordUtils.capitalize(""a b c""));
    }

    @Test
    public void testCapitalize_Punctuation() {
        assertEquals(""Hello, World!"", WordUtils.capitalize(""hello, world!""));
    }

    @Test
    public void testCapitalize_AllUppercase() {
        assertEquals(""HELLO WORLD"", WordUtils.capitalize(""HELLO WORLD""));
    }

    @Test
    public void testCapitalize_MixedCase() {
        assertEquals(""Java Programming"", WordUtils.capitalize(""java PROGRAMMING""));
    }

    @Test
    public void testCapitalize_Whitespace() {
        assertEquals(""   A"", WordUtils.capitalize(""   a""));
    }
}
```","package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_String_capitalize_String_Test {

    @Test
    public void testCapitalize_NullString() {
        assertNull(WordUtils.capitalize(null));
    }

    @Test
    public void testCapitalize_EmptyString() {
        assertEquals("""", WordUtils.capitalize(""""));
    }

    @Test
    public void testCapitalize_SingleWord() {
        assertEquals(""Hello"", WordUtils.capitalize(""hello""));
    }

    @Test
    public void testCapitalize_MultipleWords() {
        assertEquals(""I Am FINE"", WordUtils.capitalize(""i am FINE""));
    }

    @Test
    public void testCapitalize_SingleLowercaseLetters() {
        assertEquals(""A B C"", WordUtils.capitalize(""a b c""));
    }

    @Test
    public void testCapitalize_Punctuation() {
        assertEquals(""Hello, World!"", WordUtils.capitalize(""hello, world!""));
    }

    @Test
    public void testCapitalize_AllUppercase() {
        assertEquals(""HELLO WORLD"", WordUtils.capitalize(""HELLO WORLD""));
    }

    @Test
    public void testCapitalize_MixedCase() {
        assertEquals(""Java Programming"", WordUtils.capitalize(""java PROGRAMMING""));
    }

    @Test
    public void testCapitalize_Whitespace() {
        assertEquals(""   A"", WordUtils.capitalize(""   a""));
    }
}
","org/apache/commons/lang3/WordUtils_String_capitalize_String_Test.java","","file_not_found"
"org.apache.commons.lang3.text.WordUtils.capitalizeFully(java.lang.String, char[])","java.lang.String capitalizeFully(java.lang.String, char[])","{
    char[] delimiters;
    java.lang.String str;
    unknown $stack3, $stack4, $stack5, $stack6, $stack7, delimLen;


    str := @parameter0: java.lang.String;
    delimiters := @parameter1: char[];

    if delimiters != null goto label1;
    $stack6 = -1;

    goto label2;

  label1:
    $stack6 = lengthof delimiters;

  label2:
    $stack7 = str;
    $stack3 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>($stack7);

    if $stack3 != 0 goto label3;

    if delimLen != 0 goto label4;

  label3:
    $stack5 = str;

    return $stack5;

  label4:
    str = virtualinvoke str.<java.lang.String: java.lang.String toLowerCase()>();
    $stack4 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String capitalize(java.lang.String,char[])>(str, delimiters);

    return $stack4;
}
","false","PUBLIC STATIC TRANSIENT","","<p>Converts all the delimiter separated words in a String into capitalized words, 
that is each word is made up of a titlecase character and then a series of 
lowercase characters. </p>

<p>The delimiters represent a set of characters understood to separate words.
The first string character and the first non-delimiter character after a
delimiter will be capitalized. </p>

<p>A <code>null</code> input String returns <code>null</code>.
Capitalization uses the Unicode title case, normally equivalent to
upper case.</p>

<pre>
WordUtils.capitalizeFully(null, *)            = null
WordUtils.capitalizeFully("""", *)              = """"
WordUtils.capitalizeFully(*, null)            = *
WordUtils.capitalizeFully(*, new char[0])     = *
WordUtils.capitalizeFully(""i aM.fine"", {'.'}) = ""I am.Fine""
</pre>
@param str the String to capitalize, may be null
@param delimiters set of characters to determine capitalization, null means whitespace
@return capitalized String, <code>null</code> if null String input
@since 2.1","","","0","1","org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence), java.lang.String.toLowerCase(), org.apache.commons.lang3.text.WordUtils.capitalize(java.lang.String, char...)","1, 0","public","","```java
package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_capitalizeFully_String_charArr_Test {

    @Before
    public void setUp() {
        // Setup if necessary
    }

    @Test
    public void testNullInputString() {
        assertNull(WordUtils.capitalizeFully(null, new char[] {'.'}));
    }

    @Test
    public void testEmptyInputString() {
        assertEquals("""", WordUtils.capitalizeFully("""", new char[] {'.'}));
    }

    @Test
    public void testNullDelimiters() {
        assertEquals(""I Am Fine"", WordUtils.capitalizeFully(""i aM fine"", null));
    }

    @Test
    public void testEmptyDelimiters() {
        assertEquals(""I am Fine"", WordUtils.capitalizeFully(""i aM fine"", new char[0]));
    }

    @Test
    public void testCapitalizeWithGivenDelimiters() {
        assertEquals(""I am.Fine"", WordUtils.capitalizeFully(""i aM.fine"", new char[] {'.'}));
    }

    @Test
    public void testCapitalizeWithWhitespaceDelimiter() {
        assertEquals(""I Am Fine"", WordUtils.capitalizeFully(""i aM fine"", new char[] {' '}));
    }

    @Test
    public void testCapitalizeWithMultipleDelimiters() {
        assertEquals(""I Am.Fine"", WordUtils.capitalizeFully(""i aM.fine"", new char[] {' ', '.'}));
    }

    @Test
    public void testCapitalizeWithNoDelimiterMatch() {
        assertEquals(""I aM Fine"", WordUtils.capitalizeFully(""i aM fine"", new char[] {'-'}));
    }
}
```","package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_capitalizeFully_String_charArr_Test {

    @Before
    public void setUp() {
        // Setup if necessary
    }

    @Test
    public void testNullInputString() {
        assertNull(WordUtils.capitalizeFully(null, new char[] {'.'}));
    }

    @Test
    public void testEmptyInputString() {
        assertEquals("""", WordUtils.capitalizeFully("""", new char[] {'.'}));
    }

    @Test
    public void testNullDelimiters() {
        assertEquals(""I Am Fine"", WordUtils.capitalizeFully(""i aM fine"", null));
    }

    @Test
    public void testEmptyDelimiters() {
        assertEquals(""I am Fine"", WordUtils.capitalizeFully(""i aM fine"", new char[0]));
    }

    @Test
    public void testCapitalizeWithGivenDelimiters() {
        assertEquals(""I am.Fine"", WordUtils.capitalizeFully(""i aM.fine"", new char[] {'.'}));
    }

    @Test
    public void testCapitalizeWithWhitespaceDelimiter() {
        assertEquals(""I Am Fine"", WordUtils.capitalizeFully(""i aM fine"", new char[] {' '}));
    }

    @Test
    public void testCapitalizeWithMultipleDelimiters() {
        assertEquals(""I Am.Fine"", WordUtils.capitalizeFully(""i aM.fine"", new char[] {' ', '.'}));
    }

    @Test
    public void testCapitalizeWithNoDelimiterMatch() {
        assertEquals(""I aM Fine"", WordUtils.capitalizeFully(""i aM fine"", new char[] {'-'}));
    }
}
","org/apache/commons/lang3/WordUtils_capitalizeFully_String_charArr_Test.java","","file_not_found"
"org.apache.commons.lang3.text.WordUtils.swapCase(java.lang.String)","java.lang.String swapCase(java.lang.String)","{
    java.lang.String str;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack5, $stack6, $stack7, $stack8, $stack9, buffer, ch, i, whitespace;


    str := @parameter0: java.lang.String;
    $stack5 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>(str);

    if $stack5 == 0 goto label1;

    return str;

  label1:
    buffer = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
    whitespace = 1;
    i = 0;

    goto label4;

  label2:
    whitespace = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch);

  label3:
    i = i + 1;

  label4:
    $stack11 = i;
    $stack10 = buffer;
    $stack6 = lengthof $stack10;

    if $stack11 < $stack6 goto label5;
    $stack16 = new java.lang.String;
    specialinvoke $stack16.<java.lang.String: void <init>(char[])>(buffer);

    return $stack16;

  label5:
    ch = buffer[i];
    $stack7 = staticinvoke <java.lang.Character: boolean isUpperCase(char)>(ch);

    if $stack7 == 0 goto label6;
    $stack15 = staticinvoke <java.lang.Character: char toLowerCase(char)>(ch);
    buffer[i] = $stack15;
    whitespace = 0;

    goto label3;

  label6:
    $stack8 = staticinvoke <java.lang.Character: boolean isTitleCase(char)>(ch);

    if $stack8 == 0 goto label7;
    $stack14 = staticinvoke <java.lang.Character: char toLowerCase(char)>(ch);
    buffer[i] = $stack14;
    whitespace = 0;

    goto label3;

  label7:
    $stack9 = staticinvoke <java.lang.Character: boolean isLowerCase(char)>(ch);

    if $stack9 == 0 goto label2;

    if whitespace == 0 goto label8;
    $stack13 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch);
    buffer[i] = $stack13;
    whitespace = 0;

    goto label3;

  label8:
    $stack12 = staticinvoke <java.lang.Character: char toUpperCase(char)>(ch);
    buffer[i] = $stack12;

    goto label3;
}
","false","PUBLIC STATIC","","<p>Swaps the case of a String using a word based algorithm.</p>

<ul>
 <li>Upper case character converts to Lower case</li>
 <li>Title case character converts to Lower case</li>
 <li>Lower case character after Whitespace or at start converts to Title case</li>
 <li>Other Lower case character converts to Upper case</li>
</ul>

<p>Whitespace is defined by {@link Character#isWhitespace(char)}.
A <code>null</code> input String returns <code>null</code>.</p>

<pre>
StringUtils.swapCase(null)                 = null
StringUtils.swapCase("""")                   = """"
StringUtils.swapCase(""The dog has a BONE"") = ""tHE DOG HAS A bone""
</pre>
@param str the String to swap case, may be null
@return the changed String, <code>null</code> if null String input","","","1","5","org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence), java.lang.String.toCharArray(), java.lang.Character.isUpperCase(char), java.lang.Character.toLowerCase(char), java.lang.Character.isTitleCase(char), java.lang.Character.isLowerCase(char), java.lang.Character.toTitleCase(char), java.lang.Character.toUpperCase(char), java.lang.Character.isWhitespace(char)","0, true, false","public","","```java
package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Test;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_swapCase_String_Test {

    @Test
    public void testSwapCase_withNullInput() {
        assertNull(WordUtils.swapCase(null));
    }

    @Test
    public void testSwapCase_withEmptyString() {
        assertEquals("""", WordUtils.swapCase(""""));
    }

    @Test
    public void testSwapCase_withUppercase() {
        assertEquals(""hello"", WordUtils.swapCase(""HELLO""));
    }

    @Test
    public void testSwapCase_withLowercase() {
        assertEquals(""HELLO"", WordUtils.swapCase(""hello""));
    }

    @Test
    public void testSwapCase_withMixedCase() {
        assertEquals(""tHE DOG HAS A bone"", WordUtils.swapCase(""The dog has a BONE""));
    }

    @Test
    public void testSwapCase_withTitleCaseCharacter() {
        assertEquals(""tHis Is A tEst"", WordUtils.swapCase(""This is a Test""));
    }

    @Test
    public void testSwapCase_withWhitespaceAndLowercase() {
        assertEquals(""Hello World"", WordUtils.swapCase(""hELLO wORLD""));
    }

    @Test
    public void testSwapCase_withNoWhitespace() {
        assertEquals(""jAVA pROGRAM"", WordUtils.swapCase(""Java Program""));
    }

    @Test
    public void testSwapCase_withSpecialCharacters() {
        assertEquals(""123 ABC!#"", WordUtils.swapCase(""123 abc!#""));
    }
}
```","package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Test;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_swapCase_String_Test {

    @Test
    public void testSwapCase_withNullInput() {
        assertNull(WordUtils.swapCase(null));
    }

    @Test
    public void testSwapCase_withEmptyString() {
        assertEquals("""", WordUtils.swapCase(""""));
    }

    @Test
    public void testSwapCase_withUppercase() {
        assertEquals(""hello"", WordUtils.swapCase(""HELLO""));
    }

    @Test
    public void testSwapCase_withLowercase() {
        assertEquals(""HELLO"", WordUtils.swapCase(""hello""));
    }

    @Test
    public void testSwapCase_withMixedCase() {
        assertEquals(""tHE DOG HAS A bone"", WordUtils.swapCase(""The dog has a BONE""));
    }

    @Test
    public void testSwapCase_withTitleCaseCharacter() {
        assertEquals(""tHis Is A tEst"", WordUtils.swapCase(""This is a Test""));
    }

    @Test
    public void testSwapCase_withWhitespaceAndLowercase() {
        assertEquals(""Hello World"", WordUtils.swapCase(""hELLO wORLD""));
    }

    @Test
    public void testSwapCase_withNoWhitespace() {
        assertEquals(""jAVA pROGRAM"", WordUtils.swapCase(""Java Program""));
    }

    @Test
    public void testSwapCase_withSpecialCharacters() {
        assertEquals(""123 ABC!#"", WordUtils.swapCase(""123 abc!#""));
    }
}
","org/apache/commons/lang3/WordUtils_swapCase_String_Test.java","","file_not_found"
"org.apache.commons.lang3.text.WordUtils.wrap(java.lang.String, int)","java.lang.String wrap(java.lang.String, int)","{
    int wrapLength;
    java.lang.String str;
    unknown $stack2;


    str := @parameter0: java.lang.String;
    wrapLength := @parameter1: int;
    $stack2 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String wrap(java.lang.String,int,java.lang.String,boolean)>(str, wrapLength, null, 0);

    return $stack2;
}
","false","PUBLIC STATIC","","<p>Wraps a single line of text, identifying words by <code>' '</code>.</p>

<p>New lines will be separated by the system property line separator.
Very long words, such as URLs will <i>not</i> be wrapped.</p>

<p>Leading spaces on a new line are stripped.
Trailing spaces are not stripped.</p>

<pre>
WordUtils.wrap(null, *) = null
WordUtils.wrap("""", *) = """"
</pre>
@param str the String to be word wrapped, may be null
@param wrapLength the column to wrap the words at, less than 1 is treated as 1
@return a line with newlines inserted, <code>null</code> if null input","","","0","0","org.apache.commons.lang3.text.WordUtils.wrap(java.lang.String, int, java.lang.String, boolean)","false","public","","```java
package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_wrap_String_int_Test {

    @Test
    public void testWrap_NullString() {
        assertNull(WordUtils.wrap(null, 10));
    }

    @Test
    public void testWrap_EmptyString() {
        assertEquals("""", WordUtils.wrap("""", 10));
    }

    @Test
    public void testWrap_SingleWord() {
        String str = ""unbreakable"";
        assertEquals(str, WordUtils.wrap(str, 10));
    }

    @Test
    public void testWrap_MultipleWords() {
        String str = ""word wrap test case"";
        String expected = ""word wrap\ntest case"";
        assertEquals(expected, WordUtils.wrap(str, 10));
    }

    @Test
    public void testWrap_LongWord() {
        String str = ""thisisaverylongwordthatexceedsthewraplength"";
        assertEquals(str, WordUtils.wrap(str, 10));
    }

    @Test
    public void testWrap_WrapLengthLessThanOne() {
        String str = ""small word"";
        String expected = ""small\nword"";
        assertEquals(expected, WordUtils.wrap(str, 0));
    }

    @Test
    public void testWrap_WrapAtExactLength() {
        String str = ""12345 67890"";
        String expected = ""12345\n67890"";
        assertEquals(expected, WordUtils.wrap(str, 5));
    }
}
```","package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_wrap_String_int_Test {

    @Test
    public void testWrap_NullString() {
        assertNull(WordUtils.wrap(null, 10));
    }

    @Test
    public void testWrap_EmptyString() {
        assertEquals("""", WordUtils.wrap("""", 10));
    }

    @Test
    public void testWrap_SingleWord() {
        String str = ""unbreakable"";
        assertEquals(str, WordUtils.wrap(str, 10));
    }

    @Test
    public void testWrap_MultipleWords() {
        String str = ""word wrap test case"";
        String expected = ""word wrap\ntest case"";
        assertEquals(expected, WordUtils.wrap(str, 10));
    }

    @Test
    public void testWrap_LongWord() {
        String str = ""thisisaverylongwordthatexceedsthewraplength"";
        assertEquals(str, WordUtils.wrap(str, 10));
    }

    @Test
    public void testWrap_WrapLengthLessThanOne() {
        String str = ""small word"";
        String expected = ""small\nword"";
        assertEquals(expected, WordUtils.wrap(str, 0));
    }

    @Test
    public void testWrap_WrapAtExactLength() {
        String str = ""12345 67890"";
        String expected = ""12345\n67890"";
        assertEquals(expected, WordUtils.wrap(str, 5));
    }
}
","org/apache/commons/lang3/WordUtils_wrap_String_int_Test.java","","file_not_found"
"org.apache.commons.lang3.text.WordUtils.uncapitalize(java.lang.String, char[])","java.lang.String uncapitalize(java.lang.String, char[])","{
    char[] delimiters;
    java.lang.String str;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack7, $stack8, $stack9, buffer, ch, delimLen, i, uncapitalizeNext;


    str := @parameter0: java.lang.String;
    delimiters := @parameter1: char[];

    if delimiters != null goto label1;
    $stack15 = -1;

    goto label2;

  label1:
    $stack15 = lengthof delimiters;

  label2:
    $stack16 = str;
    $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>($stack16);

    if $stack7 != 0 goto label3;

    if delimLen != 0 goto label4;

  label3:
    $stack14 = str;

    return $stack14;

  label4:
    buffer = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
    uncapitalizeNext = 1;
    i = 0;

    goto label7;

  label5:
    if uncapitalizeNext == 0 goto label6;
    $stack12 = staticinvoke <java.lang.Character: char toLowerCase(char)>(ch);
    buffer[i] = $stack12;
    uncapitalizeNext = 0;

  label6:
    i = i + 1;

  label7:
    $stack11 = i;
    $stack10 = buffer;
    $stack8 = lengthof $stack10;

    if $stack11 < $stack8 goto label8;
    $stack13 = new java.lang.String;
    specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer);

    return $stack13;

  label8:
    ch = buffer[i];
    $stack9 = staticinvoke <org.apache.commons.lang3.text.WordUtils: boolean isDelimiter(char,char[])>(ch, delimiters);

    if $stack9 == 0 goto label5;
    uncapitalizeNext = 1;

    goto label6;
}
","false","PUBLIC STATIC TRANSIENT","","<p>Uncapitalizes all the whitespace separated words in a String.
Only the first letter of each word is changed.</p>

<p>The delimiters represent a set of characters understood to separate words.
The first string character and the first non-delimiter character after a
delimiter will be uncapitalized. </p>

<p>Whitespace is defined by {@link Character#isWhitespace(char)}.
A <code>null</code> input String returns <code>null</code>.</p>

<pre>
WordUtils.uncapitalize(null, *)            = null
WordUtils.uncapitalize("""", *)              = """"
WordUtils.uncapitalize(*, null)            = *
WordUtils.uncapitalize(*, new char[0])     = *
WordUtils.uncapitalize(""I AM.FINE"", {'.'}) = ""i AM.fINE""
</pre>
@param str the String to uncapitalize, may be null
@param delimiters set of characters to determine uncapitalization, null means whitespace
@return uncapitalized String, <code>null</code> if null String input
@see #capitalize(String)
@since 2.1","","","1","3","org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence), java.lang.String.toCharArray(), org.apache.commons.lang3.text.WordUtils.isDelimiter(char, char[]), java.lang.Character.toLowerCase(char)","1, 0, true, false","public","","```java
package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_uncapitalize_String_charArray_Test {

    @Before
    public void setUp() {
        // Any necessary setup can be done here
    }

    @Test
    public void testUncapitalize_NullString() {
        assertNull(""Expected null when input string is null"",
                WordUtils.uncapitalize(null, new char[] {'.'}));
    }

    @Test
    public void testUncapitalize_EmptyString() {
        assertEquals(""Expected empty string when input string is empty"",
                """", WordUtils.uncapitalize("""", new char[] {'.'}));
    }

    @Test
    public void testUncapitalize_NoDelimiters() {
        assertEquals(""Expected input string when delimiters are null"",
                ""I AM FINE"", WordUtils.uncapitalize(""I AM FINE"", null));
    }

    @Test
    public void testUncapitalize_EmptyDelimiters() {
        assertEquals(""Expected input string when delimiters are empty"",
                ""I AM FINE"", WordUtils.uncapitalize(""I AM FINE"", new char[0]));
    }

    @Test
    public void testUncapitalize_WithDelimiters() {
        assertEquals(""Expected specific uncapitalization with delimiters"",
                ""i AM.fINE"", WordUtils.uncapitalize(""I AM.FINE"", new char[] {'.'}));
    }

    @Test
    public void testUncapitalize_NoDelimiters_NonWhitespaceChars() {
        assertEquals(""Expected specific uncapitalization with delimiters"",
                ""i am fine"", WordUtils.uncapitalize(""I am fine"", new char[] {' '}));
    }

    @Test
    public void testUncapitalize_MixedDelimiters() {
        assertEquals(""Expected specific uncapitalization with mixed delimiters"",
                ""i am.fine"", WordUtils.uncapitalize(""I AM.FINE"", new char[] {'.', ' '}));
    }
}
```","package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_uncapitalize_String_charArray_Test {

    @Before
    public void setUp() {
        // Any necessary setup can be done here
    }

    @Test
    public void testUncapitalize_NullString() {
        assertNull(""Expected null when input string is null"",
                WordUtils.uncapitalize(null, new char[] {'.'}));
    }

    @Test
    public void testUncapitalize_EmptyString() {
        assertEquals(""Expected empty string when input string is empty"",
                """", WordUtils.uncapitalize("""", new char[] {'.'}));
    }

    @Test
    public void testUncapitalize_NoDelimiters() {
        assertEquals(""Expected input string when delimiters are null"",
                ""I AM FINE"", WordUtils.uncapitalize(""I AM FINE"", null));
    }

    @Test
    public void testUncapitalize_EmptyDelimiters() {
        assertEquals(""Expected input string when delimiters are empty"",
                ""I AM FINE"", WordUtils.uncapitalize(""I AM FINE"", new char[0]));
    }

    @Test
    public void testUncapitalize_WithDelimiters() {
        assertEquals(""Expected specific uncapitalization with delimiters"",
                ""i AM.fINE"", WordUtils.uncapitalize(""I AM.FINE"", new char[] {'.'}));
    }

    @Test
    public void testUncapitalize_NoDelimiters_NonWhitespaceChars() {
        assertEquals(""Expected specific uncapitalization with delimiters"",
                ""i am fine"", WordUtils.uncapitalize(""I am fine"", new char[] {' '}));
    }

    @Test
    public void testUncapitalize_MixedDelimiters() {
        assertEquals(""Expected specific uncapitalization with mixed delimiters"",
                ""i am.fine"", WordUtils.uncapitalize(""I AM.FINE"", new char[] {'.', ' '}));
    }
}
","org/apache/commons/lang3/WordUtils_uncapitalize_String_charArray_Test.java","","file_not_found"
"org.apache.commons.lang3.text.WordUtils.isDelimiter(char, char[])","boolean isDelimiter(char, char[])","{
    char ch;
    char[] delimiters;
    unknown $stack6, $stack7, $stack8, delimiter, l3, l4, l5;


    ch := @parameter0: char;
    delimiters := @parameter1: char[];

    if delimiters != null goto label1;
    $stack8 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>(ch);

    return $stack8;

  label1:
    l5 = delimiters;
    l4 = lengthof delimiters;
    l3 = 0;

    goto label3;

  label2:
    l3 = l3 + 1;

  label3:
    $stack7 = l3;
    $stack6 = l4;

    if $stack7 < $stack6 goto label4;

    return 0;

  label4:
    delimiter = l5[l3];

    if ch != delimiter goto label2;

    return 1;
}
","false","PRIVATE STATIC","","Is the character a delimiter.
@param ch the character to check
@param delimiters the delimiters
@return true if it is a delimiter","","","0","2","java.lang.Character.isWhitespace(char)","true, false","public","","```java
package org.apache.commons.lang3;

import org.junit.Test;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_boolean_isDelimiter_char_charArr_Test {

    // Cannot directly test private static method isDelimiter
    // Tests would be here for public methods relying on isDelimiter if they existed
}
```","package org.apache.commons.lang3;

import org.junit.Test;
import org.junit.Before;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_boolean_isDelimiter_char_charArr_Test {

    // Cannot directly test private static method isDelimiter
    // Tests would be here for public methods relying on isDelimiter if they existed
}
","org/apache/commons/lang3/WordUtils_boolean_isDelimiter_char_charArr_Test.java","","file_not_found"
"org.apache.commons.lang3.text.WordUtils.uncapitalize(java.lang.String)","java.lang.String uncapitalize(java.lang.String)","{
    java.lang.String str;
    unknown $stack1;


    str := @parameter0: java.lang.String;
    $stack1 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String uncapitalize(java.lang.String,char[])>(str, null);

    return $stack1;
}
","false","PUBLIC STATIC","","<p>Uncapitalizes all the whitespace separated words in a String.
Only the first letter of each word is changed.</p>

<p>Whitespace is defined by {@link Character#isWhitespace(char)}.
A <code>null</code> input String returns <code>null</code>.</p>

<pre>
WordUtils.uncapitalize(null)        = null
WordUtils.uncapitalize("""")          = """"
WordUtils.uncapitalize(""I Am FINE"") = ""i am fINE""
</pre>
@param str the String to uncapitalize, may be null
@return uncapitalized String, <code>null</code> if null String input
@see #capitalize(String)","","","0","0","","","public","","```java
package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

@RunWith(JUnit4.class)
public class WordUtils_String_uncapitalize_String_Test {

    @Test
    public void testUncapitalize_NullInput() {
        assertNull(WordUtils.uncapitalize(null));
    }

    @Test
    public void testUncapitalize_EmptyString() {
        assertEquals("""", WordUtils.uncapitalize(""""));
    }

    @Test
    public void testUncapitalize_SingleWord() {
        assertEquals(""hello"", WordUtils.uncapitalize(""Hello""));
    }

    @Test
    public void testUncapitalize_MultipleWords() {
        assertEquals(""i am fine"", WordUtils.uncapitalize(""I Am Fine""));
    }

    @Test
    public void testUncapitalize_MixedCaseWords() {
        assertEquals(""i am fINE"", WordUtils.uncapitalize(""I Am FINE""));
    }

    @Test
    public void testUncapitalize_NoChangeNeeded() {
        assertEquals(""i am fine"", WordUtils.uncapitalize(""i am fine""));
    }
}
```","package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

@RunWith(JUnit4.class)
public class WordUtils_String_uncapitalize_String_Test {

    @Test
    public void testUncapitalize_NullInput() {
        assertNull(WordUtils.uncapitalize(null));
    }

    @Test
    public void testUncapitalize_EmptyString() {
        assertEquals("""", WordUtils.uncapitalize(""""));
    }

    @Test
    public void testUncapitalize_SingleWord() {
        assertEquals(""hello"", WordUtils.uncapitalize(""Hello""));
    }

    @Test
    public void testUncapitalize_MultipleWords() {
        assertEquals(""i am fine"", WordUtils.uncapitalize(""I Am Fine""));
    }

    @Test
    public void testUncapitalize_MixedCaseWords() {
        assertEquals(""i am fINE"", WordUtils.uncapitalize(""I Am FINE""));
    }

    @Test
    public void testUncapitalize_NoChangeNeeded() {
        assertEquals(""i am fine"", WordUtils.uncapitalize(""i am fine""));
    }
}
","org/apache/commons/lang3/WordUtils_String_uncapitalize_String_Test.java","","file_not_found"
"org.apache.commons.lang3.text.WordUtils.initials(java.lang.String)","java.lang.String initials(java.lang.String)","{
    java.lang.String str;
    unknown $stack1;


    str := @parameter0: java.lang.String;
    $stack1 = staticinvoke <org.apache.commons.lang3.text.WordUtils: java.lang.String initials(java.lang.String,char[])>(str, null);

    return $stack1;
}
","false","PUBLIC STATIC","","<p>Extracts the initial letters from each word in the String.</p>

<p>The first letter of the string and all first letters after
whitespace are returned as a new string.
Their case is not changed.</p>

<p>Whitespace is defined by {@link Character#isWhitespace(char)}.
A <code>null</code> input String returns <code>null</code>.</p>

<pre>
WordUtils.initials(null)             = null
WordUtils.initials("""")               = """"
WordUtils.initials(""Ben John Lee"")   = ""BJL""
WordUtils.initials(""Ben J.Lee"")      = ""BJ""
</pre>
@param str the String to get initials from, may be null
@return String of initial letters, <code>null</code> if null String input
@see #initials(String,char[])
@since 2.2","","","0","0","","","public","","```java
package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

@RunWith(JUnit4.class)
public class WordUtils_String_initials_String_Test {

    @Test
    public void testInitialsWithNullString() {
        assertNull(WordUtils.initials(null));
    }

    @Test
    public void testInitialsWithEmptyString() {
        assertEquals("""", WordUtils.initials(""""));
    }

    @Test
    public void testInitialsWithRegularString() {
        assertEquals(""BJL"", WordUtils.initials(""Ben John Lee""));
    }

    @Test
    public void testInitialsWithPunctuation() {
        assertEquals(""BJ"", WordUtils.initials(""Ben J.Lee""));
    }
}
```","package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

@RunWith(JUnit4.class)
public class WordUtils_String_initials_String_Test {

    @Test
    public void testInitialsWithNullString() {
        assertNull(WordUtils.initials(null));
    }

    @Test
    public void testInitialsWithEmptyString() {
        assertEquals("""", WordUtils.initials(""""));
    }

    @Test
    public void testInitialsWithRegularString() {
        assertEquals(""BJL"", WordUtils.initials(""Ben John Lee""));
    }

    @Test
    public void testInitialsWithPunctuation() {
        assertEquals(""BJ"", WordUtils.initials(""Ben J.Lee""));
    }
}
","org/apache/commons/lang3/WordUtils_String_initials_String_Test.java","","file_not_found"
"org.apache.commons.lang3.text.WordUtils.capitalize(java.lang.String, char[])","java.lang.String capitalize(java.lang.String, char[])","{
    char[] delimiters;
    java.lang.String str;
    unknown $stack10, $stack11, $stack12, $stack13, $stack14, $stack15, $stack16, $stack7, $stack8, $stack9, buffer, capitalizeNext, ch, delimLen, i;


    str := @parameter0: java.lang.String;
    delimiters := @parameter1: char[];

    if delimiters != null goto label1;
    $stack15 = -1;

    goto label2;

  label1:
    $stack15 = lengthof delimiters;

  label2:
    $stack16 = str;
    $stack7 = staticinvoke <org.apache.commons.lang3.StringUtils: boolean isEmpty(java.lang.CharSequence)>($stack16);

    if $stack7 != 0 goto label3;

    if delimLen != 0 goto label4;

  label3:
    $stack14 = str;

    return $stack14;

  label4:
    buffer = virtualinvoke str.<java.lang.String: char[] toCharArray()>();
    capitalizeNext = 1;
    i = 0;

    goto label7;

  label5:
    if capitalizeNext == 0 goto label6;
    $stack12 = staticinvoke <java.lang.Character: char toTitleCase(char)>(ch);
    buffer[i] = $stack12;
    capitalizeNext = 0;

  label6:
    i = i + 1;

  label7:
    $stack11 = i;
    $stack10 = buffer;
    $stack8 = lengthof $stack10;

    if $stack11 < $stack8 goto label8;
    $stack13 = new java.lang.String;
    specialinvoke $stack13.<java.lang.String: void <init>(char[])>(buffer);

    return $stack13;

  label8:
    ch = buffer[i];
    $stack9 = staticinvoke <org.apache.commons.lang3.text.WordUtils: boolean isDelimiter(char,char[])>(ch, delimiters);

    if $stack9 == 0 goto label5;
    capitalizeNext = 1;

    goto label6;
}
","false","PUBLIC STATIC TRANSIENT","","<p>Capitalizes all the delimiter separated words in a String.
Only the first letter of each word is changed. To convert the 
rest of each word to lowercase at the same time, 
use {@link #capitalizeFully(String, char[])}.</p>

<p>The delimiters represent a set of characters understood to separate words.
The first string character and the first non-delimiter character after a
delimiter will be capitalized. </p>

<p>A <code>null</code> input String returns <code>null</code>.
Capitalization uses the Unicode title case, normally equivalent to
upper case.</p>

<pre>
WordUtils.capitalize(null, *)            = null
WordUtils.capitalize("""", *)              = """"
WordUtils.capitalize(*, new char[0])     = *
WordUtils.capitalize(""i am fine"", null)  = ""I Am Fine""
WordUtils.capitalize(""i aM.fine"", {'.'}) = ""I aM.Fine""
</pre>
@param str the String to capitalize, may be null
@param delimiters set of characters to determine capitalization, null means whitespace
@return capitalized String, <code>null</code> if null String input
@see #uncapitalize(String)
@see #capitalizeFully(String)
@since 2.1","","","1","3","org.apache.commons.lang3.StringUtils.isEmpty(java.lang.CharSequence), java.lang.String.toCharArray(), org.apache.commons.lang3.text.WordUtils.isDelimiter(char, char[]), java.lang.Character.toTitleCase(char)","1, 0, true, false","public","","```java
package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_capitalize_String_charArray_Test {

    private char[] defaultDelimiters;

    @Before
    public void setUp() {
        // Set up default delimiters
        defaultDelimiters = new char[]{' '};
    }

    @Test
    public void testCapitalize_NullInput() {
        assertNull(WordUtils.capitalize(null, defaultDelimiters));
    }

    @Test
    public void testCapitalize_EmptyString() {
        assertEquals("""", WordUtils.capitalize("""", defaultDelimiters));
    }

    @Test
    public void testCapitalize_NoDelimiters() {
        assertEquals(""I Am Fine"", WordUtils.capitalize(""i am fine"", null));
    }

    @Test
    public void testCapitalize_WithDelimiters() {
        assertEquals(""I aM.Fine"", WordUtils.capitalize(""i aM.fine"", new char[]{'.'}));
    }

    @Test
    public void testCapitalize_MixedDelimiters() {
        assertEquals(""Hello-World"", WordUtils.capitalize(""hello-world"", new char[]{'-'}));
    }

    @Test
    public void testCapitalize_SingleCharacter() {
        assertEquals(""I"", WordUtils.capitalize(""i"", defaultDelimiters));
    }

    @Test
    public void testCapitalize_MultipleSpaces() {
        assertEquals(""A  B C"", WordUtils.capitalize(""a  b c"", new char[]{' '}));
    }

    @Test
    public void testCapitalize_SpecialCharacters() {
        assertEquals(""!Hi!There"", WordUtils.capitalize(""!hi!there"", new char[]{'!'}));
    }

    @Test
    public void testCapitalize_LeadingTrailingSpaces() {
        assertEquals("" Abc "", WordUtils.capitalize("" abc "", new char[]{' '}));
    }

    @Test
    public void testCapitalize_AllUpperCaseInput() {
        assertEquals(""Hello World"", WordUtils.capitalize(""HELLO WORLD"", defaultDelimiters));
    }

    @Test
    public void testCapitalize_NoDelimitersInString() {
        assertEquals(""Abc"", WordUtils.capitalize(""abc"", new char[]{'.'}));
    }
}
```","package org.apache.commons.lang3;

import org.apache.commons.lang3.text.WordUtils;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class WordUtils_capitalize_String_charArray_Test {

    private char[] defaultDelimiters;

    @Before
    public void setUp() {
        // Set up default delimiters
        defaultDelimiters = new char[]{' '};
    }

    @Test
    public void testCapitalize_NullInput() {
        assertNull(WordUtils.capitalize(null, defaultDelimiters));
    }

    @Test
    public void testCapitalize_EmptyString() {
        assertEquals("""", WordUtils.capitalize("""", defaultDelimiters));
    }

    @Test
    public void testCapitalize_NoDelimiters() {
        assertEquals(""I Am Fine"", WordUtils.capitalize(""i am fine"", null));
    }

    @Test
    public void testCapitalize_WithDelimiters() {
        assertEquals(""I aM.Fine"", WordUtils.capitalize(""i aM.fine"", new char[]{'.'}));
    }

    @Test
    public void testCapitalize_MixedDelimiters() {
        assertEquals(""Hello-World"", WordUtils.capitalize(""hello-world"", new char[]{'-'}));
    }

    @Test
    public void testCapitalize_SingleCharacter() {
        assertEquals(""I"", WordUtils.capitalize(""i"", defaultDelimiters));
    }

    @Test
    public void testCapitalize_MultipleSpaces() {
        assertEquals(""A  B C"", WordUtils.capitalize(""a  b c"", new char[]{' '}));
    }

    @Test
    public void testCapitalize_SpecialCharacters() {
        assertEquals(""!Hi!There"", WordUtils.capitalize(""!hi!there"", new char[]{'!'}));
    }

    @Test
    public void testCapitalize_LeadingTrailingSpaces() {
        assertEquals("" Abc "", WordUtils.capitalize("" abc "", new char[]{' '}));
    }

    @Test
    public void testCapitalize_AllUpperCaseInput() {
        assertEquals(""Hello World"", WordUtils.capitalize(""HELLO WORLD"", defaultDelimiters));
    }

    @Test
    public void testCapitalize_NoDelimitersInString() {
        assertEquals(""Abc"", WordUtils.capitalize(""abc"", new char[]{'.'}));
    }
}
","org/apache/commons/lang3/WordUtils_capitalize_String_charArray_Test.java","","file_not_found"
"org.apache.commons.lang3.concurrent.AtomicInitializer.get()","java.lang.Object get()","{
    org.apache.commons.lang3.concurrent.AtomicInitializer this;
    unknown $stack2, $stack3, $stack4, $stack5, $stack6, result;


    this := @this: org.apache.commons.lang3.concurrent.AtomicInitializer;
    $stack2 = this.<org.apache.commons.lang3.concurrent.AtomicInitializer: java.util.concurrent.atomic.AtomicReference reference>;
    result = virtualinvoke $stack2.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

    if result != null goto label1;
    result = virtualinvoke this.<org.apache.commons.lang3.concurrent.AtomicInitializer: java.lang.Object initialize()>();
    $stack3 = this.<org.apache.commons.lang3.concurrent.AtomicInitializer: java.util.concurrent.atomic.AtomicReference reference>;
    $stack4 = virtualinvoke $stack3.<java.util.concurrent.atomic.AtomicReference: boolean compareAndSet(java.lang.Object,java.lang.Object)>(null, result);

    if $stack4 != 0 goto label1;
    $stack6 = this.<org.apache.commons.lang3.concurrent.AtomicInitializer: java.util.concurrent.atomic.AtomicReference reference>;
    result = virtualinvoke $stack6.<java.util.concurrent.atomic.AtomicReference: java.lang.Object get()>();

  label1:
    $stack5 = result;

    return $stack5;
}
","false","PUBLIC","Override","Returns the object managed by this initializer. The object is created if
it is not available yet and stored internally. This method always returns
the same object.
@return the object created by this {@code AtomicInitializer}
@throws ConcurrentException if an error occurred during initialization of
the object","implements org.apache.commons.lang3.concurrent.ConcurrentInitializer","PRIVATE FINAL java.util.concurrent.atomic.AtomicReference reference","0","2","java.util.concurrent.atomic.AtomicReference.get(), org.apache.commons.lang3.concurrent.AtomicInitializer.initialize(), java.util.concurrent.atomic.AtomicReference.compareAndSet(V, V)","","public","","```java
package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import java.util.concurrent.atomic.AtomicReference;
import org.apache.commons.lang3.concurrent.AtomicInitializer;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class AtomicInitializer_Object_get_Test {

    private AtomicInitializer<Object> atomicInitializer;

    @Before
    public void setUp() {
        atomicInitializer = new AtomicInitializer<Object>() {
            @Override
            protected Object initialize() {
                return new Object();
            }
        };
    }

    @Test
    public void testGet_ReturnsInitializedObject() throws Exception {
        assertNotNull(atomicInitializer.get());
    }

    @Test
    public void testGet_SameObjectReturned() throws Exception {
        Object firstCall = atomicInitializer.get();
        Object secondCall = atomicInitializer.get();
        assertSame(firstCall, secondCall);
    }

    @Test
    public void testGet_ConcurrentModification() throws Exception {
        Thread thread = new Thread(() -> {
            try {
                atomicInitializer.get();
            } catch (Exception e) {
                fail(""Exception should not be thrown: "" + e.getMessage());
            }
        });
        thread.start();
        Object mainThreadResult = atomicInitializer.get();
        thread.join();
        assertNotNull(mainThreadResult);
    }

    @Test
    public void testGet_ReferenceNotInitializedTwice() throws Exception {
        AtomicReference<Object> ref = new AtomicReference<>();
        atomicInitializer = new AtomicInitializer<Object>() {
            @Override
            protected Object initialize() {
                Object obj = new Object();
                if (!ref.compareAndSet(null, obj)) {
                    fail(""Initialize called more than once"");
                }
                return obj;
            }
        };

        Object result = atomicInitializer.get();
        assertSame(result, ref.get());
    }
}
```","package org.apache.commons.lang3;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import java.util.concurrent.atomic.AtomicReference;
import org.apache.commons.lang3.concurrent.AtomicInitializer;

import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class AtomicInitializer_Object_get_Test {

    private AtomicInitializer<Object> atomicInitializer;

    @Before
    public void setUp() {
        atomicInitializer = new AtomicInitializer<Object>() {
            @Override
            protected Object initialize() {
                return new Object();
            }
        };
    }

    @Test
    public void testGet_ReturnsInitializedObject() throws Exception {
        assertNotNull(atomicInitializer.get());
    }

    @Test
    public void testGet_SameObjectReturned() throws Exception {
        Object firstCall = atomicInitializer.get();
        Object secondCall = atomicInitializer.get();
        assertSame(firstCall, secondCall);
    }

    @Test
    public void testGet_ConcurrentModification() throws Exception {
        Thread thread = new Thread(() -> {
            try {
                atomicInitializer.get();
            } catch (Exception e) {
                fail(""Exception should not be thrown: "" + e.getMessage());
            }
        });
        thread.start();
        Object mainThreadResult = atomicInitializer.get();
        thread.join();
        assertNotNull(mainThreadResult);
    }

    @Test
    public void testGet_ReferenceNotInitializedTwice() throws Exception {
        AtomicReference<Object> ref = new AtomicReference<>();
        atomicInitializer = new AtomicInitializer<Object>() {
            @Override
            protected Object initialize() {
                Object obj = new Object();
                if (!ref.compareAndSet(null, obj)) {
                    fail(""Initialize called more than once"");
                }
                return obj;
            }
        };

        Object result = atomicInitializer.get();
        assertSame(result, ref.get());
    }
}
","org/apache/commons/lang3/AtomicInitializer_Object_get_Test.java","","file_not_found"
